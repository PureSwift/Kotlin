// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.sequences.SequencesKt__SequencesKt")
open class SequencesKt__SequencesKt: SequencesKt__SequencesJVMKt {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)
}
extension JavaClass<SequencesKt__SequencesKt> {
  @JavaStaticMethod
  public func ifEmpty(_ arg0: Sequence<JavaObject>?, _ arg1: Function0<Sequence<JavaObject>>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func shuffled(_ arg0: Sequence<JavaObject>?, _ arg1: Random?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func shuffled(_ arg0: Sequence<JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func emptySequence() -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func flatMapIndexed(_ arg0: Sequence<JavaObject>?, _ arg1: Function2<JavaObject, JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaIterator<JavaObject>>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func constrainOnce(_ arg0: Sequence<JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func generateSequence(_ arg0: JavaObject?, _ arg1: Function1<JavaObject, JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func generateSequence(_ arg0: Function0<JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func generateSequence(_ arg0: Function0<JavaObject>?, _ arg1: Function1<JavaObject, JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func asSequence(_ arg0: JavaIterator<JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func unzip(_ arg0: Sequence<Pair<JavaObject, JavaObject>>?) -> Pair<List<JavaObject>, List<JavaObject>>!

  @JavaStaticMethod
  public func sequenceOf(_ arg0: [JavaObject?]) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func flatten(_ arg0: Sequence<Sequence<JavaObject>>?) -> Sequence<JavaObject>!
}
