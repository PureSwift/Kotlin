// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.random.Random")
open class Random: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  open func nextDouble() -> Double

  @JavaMethod
  open func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  open func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  open func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open func nextInt() -> Int32

  @JavaMethod
  open func nextBytes(_ arg0: [Int8]) -> [Int8]

  @JavaMethod
  open func nextBytes(_ arg0: Int32) -> [Int8]

  @JavaMethod
  open func nextBytes(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> [Int8]

  @JavaMethod
  open func nextLong() -> Int64

  @JavaMethod
  open func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  open func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  open func nextBoolean() -> Bool

  @JavaMethod
  open func nextFloat() -> Float

  @JavaMethod
  open func nextBits(_ arg0: Int32) -> Int32
}
extension JavaClass<Random> {
  @JavaStaticField(isFinal: true)
  public var Default: Random.Default!

  @JavaStaticMethod
  public func access$getDefaultRandom$cp() -> Random!

  @JavaStaticMethod
  public func nextBytes$default(_ arg0: Random?, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: JavaObject?) -> [Int8]
}
