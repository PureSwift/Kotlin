// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.annotation.AnnotationTarget")
open class AnnotationTarget: JavaObject {
  public enum AnnotationTargetCases: Equatable {
    case CLASS
    case ANNOTATION_CLASS
    case TYPE_PARAMETER
    case PROPERTY
    case FIELD
    case LOCAL_VARIABLE
    case VALUE_PARAMETER
    case CONSTRUCTOR
    case FUNCTION
    case PROPERTY_GETTER
    case PROPERTY_SETTER
    case TYPE
    case EXPRESSION
    case FILE
    case TYPEALIAS
  }

  public var enumValue: AnnotationTargetCases! {
    let classObj = self.javaClass
    if self.equals(classObj.CLASS?.as(JavaObject.self)) {
      return AnnotationTargetCases.CLASS
    } else if self.equals(classObj.ANNOTATION_CLASS?.as(JavaObject.self)) {
      return AnnotationTargetCases.ANNOTATION_CLASS
    } else if self.equals(classObj.TYPE_PARAMETER?.as(JavaObject.self)) {
      return AnnotationTargetCases.TYPE_PARAMETER
    } else if self.equals(classObj.PROPERTY?.as(JavaObject.self)) {
      return AnnotationTargetCases.PROPERTY
    } else if self.equals(classObj.FIELD?.as(JavaObject.self)) {
      return AnnotationTargetCases.FIELD
    } else if self.equals(classObj.LOCAL_VARIABLE?.as(JavaObject.self)) {
      return AnnotationTargetCases.LOCAL_VARIABLE
    } else if self.equals(classObj.VALUE_PARAMETER?.as(JavaObject.self)) {
      return AnnotationTargetCases.VALUE_PARAMETER
    } else if self.equals(classObj.CONSTRUCTOR?.as(JavaObject.self)) {
      return AnnotationTargetCases.CONSTRUCTOR
    } else if self.equals(classObj.FUNCTION?.as(JavaObject.self)) {
      return AnnotationTargetCases.FUNCTION
    } else if self.equals(classObj.PROPERTY_GETTER?.as(JavaObject.self)) {
      return AnnotationTargetCases.PROPERTY_GETTER
    } else if self.equals(classObj.PROPERTY_SETTER?.as(JavaObject.self)) {
      return AnnotationTargetCases.PROPERTY_SETTER
    } else if self.equals(classObj.TYPE?.as(JavaObject.self)) {
      return AnnotationTargetCases.TYPE
    } else if self.equals(classObj.EXPRESSION?.as(JavaObject.self)) {
      return AnnotationTargetCases.EXPRESSION
    } else if self.equals(classObj.FILE?.as(JavaObject.self)) {
      return AnnotationTargetCases.FILE
    } else if self.equals(classObj.TYPEALIAS?.as(JavaObject.self)) {
      return AnnotationTargetCases.TYPEALIAS
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: AnnotationTargetCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<AnnotationTarget>(environment: _environment)
    switch enumValue {
      case .CLASS:
        if let CLASS = classObj.CLASS {
          self.init(javaHolder: CLASS.javaHolder)
        } else {
          fatalError("Enum value CLASS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ANNOTATION_CLASS:
        if let ANNOTATION_CLASS = classObj.ANNOTATION_CLASS {
          self.init(javaHolder: ANNOTATION_CLASS.javaHolder)
        } else {
          fatalError("Enum value ANNOTATION_CLASS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TYPE_PARAMETER:
        if let TYPE_PARAMETER = classObj.TYPE_PARAMETER {
          self.init(javaHolder: TYPE_PARAMETER.javaHolder)
        } else {
          fatalError("Enum value TYPE_PARAMETER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PROPERTY:
        if let PROPERTY = classObj.PROPERTY {
          self.init(javaHolder: PROPERTY.javaHolder)
        } else {
          fatalError("Enum value PROPERTY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FIELD:
        if let FIELD = classObj.FIELD {
          self.init(javaHolder: FIELD.javaHolder)
        } else {
          fatalError("Enum value FIELD was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LOCAL_VARIABLE:
        if let LOCAL_VARIABLE = classObj.LOCAL_VARIABLE {
          self.init(javaHolder: LOCAL_VARIABLE.javaHolder)
        } else {
          fatalError("Enum value LOCAL_VARIABLE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .VALUE_PARAMETER:
        if let VALUE_PARAMETER = classObj.VALUE_PARAMETER {
          self.init(javaHolder: VALUE_PARAMETER.javaHolder)
        } else {
          fatalError("Enum value VALUE_PARAMETER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CONSTRUCTOR:
        if let CONSTRUCTOR = classObj.CONSTRUCTOR {
          self.init(javaHolder: CONSTRUCTOR.javaHolder)
        } else {
          fatalError("Enum value CONSTRUCTOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FUNCTION:
        if let FUNCTION = classObj.FUNCTION {
          self.init(javaHolder: FUNCTION.javaHolder)
        } else {
          fatalError("Enum value FUNCTION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PROPERTY_GETTER:
        if let PROPERTY_GETTER = classObj.PROPERTY_GETTER {
          self.init(javaHolder: PROPERTY_GETTER.javaHolder)
        } else {
          fatalError("Enum value PROPERTY_GETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PROPERTY_SETTER:
        if let PROPERTY_SETTER = classObj.PROPERTY_SETTER {
          self.init(javaHolder: PROPERTY_SETTER.javaHolder)
        } else {
          fatalError("Enum value PROPERTY_SETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TYPE:
        if let TYPE = classObj.TYPE {
          self.init(javaHolder: TYPE.javaHolder)
        } else {
          fatalError("Enum value TYPE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXPRESSION:
        if let EXPRESSION = classObj.EXPRESSION {
          self.init(javaHolder: EXPRESSION.javaHolder)
        } else {
          fatalError("Enum value EXPRESSION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FILE:
        if let FILE = classObj.FILE {
          self.init(javaHolder: FILE.javaHolder)
        } else {
          fatalError("Enum value FILE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TYPEALIAS:
        if let TYPEALIAS = classObj.TYPEALIAS {
          self.init(javaHolder: TYPEALIAS.javaHolder)
        } else {
          fatalError("Enum value TYPEALIAS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AnnotationTarget> {
  @JavaStaticField(isFinal: true)
  public var CLASS: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var ANNOTATION_CLASS: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var TYPE_PARAMETER: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var PROPERTY: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var FIELD: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var LOCAL_VARIABLE: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var VALUE_PARAMETER: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var CONSTRUCTOR: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var FUNCTION: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var PROPERTY_GETTER: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var PROPERTY_SETTER: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var TYPE: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var EXPRESSION: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var FILE: AnnotationTarget!

  @JavaStaticField(isFinal: true)
  public var TYPEALIAS: AnnotationTarget!

  @JavaStaticMethod
  public func values() -> [AnnotationTarget?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> AnnotationTarget!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<AnnotationTarget>!
}
