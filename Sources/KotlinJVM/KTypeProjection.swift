// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.reflect.KTypeProjection")
open class KTypeProjection: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: KVariance?, _ arg1: KType?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func copy(_ arg0: KVariance?, _ arg1: KType?) -> KTypeProjection!

  @JavaMethod
  open func getType() -> KType!

  @JavaMethod
  open func component1() -> KVariance!

  @JavaMethod
  open func component2() -> KType!

  @JavaMethod
  open func getVariance() -> KVariance!
}
extension JavaClass<KTypeProjection> {
  @JavaStaticField(isFinal: true)
  public var Companion: KTypeProjection.Companion!

  @JavaStaticField(isFinal: true)
  public var star: KTypeProjection!

  @JavaStaticMethod
  public func copy$default(_ arg0: KTypeProjection?, _ arg1: KVariance?, _ arg2: KType?, _ arg3: Int32, _ arg4: JavaObject?) -> KTypeProjection!

  @JavaStaticMethod
  public func invariant(_ arg0: KType?) -> KTypeProjection!

  @JavaStaticMethod
  public func contravariant(_ arg0: KType?) -> KTypeProjection!

  @JavaStaticMethod
  public func covariant(_ arg0: KType?) -> KTypeProjection!
}
