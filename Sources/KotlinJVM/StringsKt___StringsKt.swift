// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaLang
import JavaRuntime
import JavaUtil

@JavaClass("kotlin.text.StringsKt___StringsKt")
open class StringsKt___StringsKt: StringsKt___StringsJvmKt {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)
}
extension JavaClass<StringsKt___StringsKt> {
  @JavaStaticMethod
  public func fold(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaStaticMethod
  public func minOrNull(_ arg0: CharSequence?) -> JavaCharacter!

  @JavaStaticMethod
  public func drop(_ arg0: String, _ arg1: Int32) -> String

  @JavaStaticMethod
  public func drop(_ arg0: CharSequence?, _ arg1: Int32) -> CharSequence!

  @JavaStaticMethod
  public func getOrNull(_ arg0: CharSequence?, _ arg1: Int32) -> JavaCharacter!

  @JavaStaticMethod
  public func firstOrNull(_ arg0: CharSequence?) -> JavaCharacter!

  @JavaStaticMethod
  public func firstOrNull(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> JavaCharacter!

  @JavaStaticMethod
  public func indexOfFirst(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Int32

  @JavaStaticMethod
  public func indexOfLast(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Int32

  @JavaStaticMethod
  public func lastOrNull(_ arg0: CharSequence?) -> JavaCharacter!

  @JavaStaticMethod
  public func lastOrNull(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> JavaCharacter!

  @JavaStaticMethod
  public func randomOrNull(_ arg0: CharSequence?, _ arg1: Random?) -> JavaCharacter!

  @JavaStaticMethod
  public func singleOrNull(_ arg0: CharSequence?) -> JavaCharacter!

  @JavaStaticMethod
  public func singleOrNull(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> JavaCharacter!

  @JavaStaticMethod
  public func dropLast(_ arg0: CharSequence?, _ arg1: Int32) -> CharSequence!

  @JavaStaticMethod
  public func dropLast(_ arg0: String, _ arg1: Int32) -> String

  @JavaStaticMethod
  public func dropLastWhile(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func dropLastWhile(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func filterIndexed(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func filterIndexed(_ arg0: String, _ arg1: Function2<JavaObject, JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func filterIndexedTo(_ arg0: CharSequence?, _ arg1: Appendable?, _ arg2: Function2<JavaObject, JavaObject, JavaBoolean>?) -> Appendable!

  @JavaStaticMethod
  public func filterNot(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func filterNot(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func filterNotTo(_ arg0: CharSequence?, _ arg1: Appendable?, _ arg2: Function1<JavaObject, JavaBoolean>?) -> Appendable!

  @JavaStaticMethod
  public func filterTo(_ arg0: CharSequence?, _ arg1: Appendable?, _ arg2: Function1<JavaObject, JavaBoolean>?) -> Appendable!

  @JavaStaticMethod
  public func takeLast(_ arg0: String, _ arg1: Int32) -> String

  @JavaStaticMethod
  public func takeLast(_ arg0: CharSequence?, _ arg1: Int32) -> CharSequence!

  @JavaStaticMethod
  public func takeLastWhile(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func takeLastWhile(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func associate(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Pair<JavaObject, JavaObject>>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func associateBy(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, JavaCharacter>!

  @JavaStaticMethod
  public func associateBy(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func associateByTo(_ arg0: CharSequence?, _ arg1: Map<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?, _ arg3: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func associateByTo(_ arg0: CharSequence?, _ arg1: Map<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func associateTo(_ arg0: CharSequence?, _ arg1: Map<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, Pair<JavaObject, JavaObject>>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func associateWith(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?) -> Map<JavaCharacter, JavaObject>!

  @JavaStaticMethod
  public func associateWithTo(_ arg0: CharSequence?, _ arg1: Map<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func toHashSet(_ arg0: CharSequence?) -> HashSet<JavaCharacter>!

  @JavaStaticMethod
  public func toMutableList(_ arg0: CharSequence?) -> List<JavaCharacter>!

  @JavaStaticMethod
  public func flatMapTo(_ arg0: CharSequence?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, Iterable<JavaObject>>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func groupBy(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, List<JavaCharacter>>!

  @JavaStaticMethod
  public func groupBy(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, List<JavaObject>>!

  @JavaStaticMethod
  public func groupByTo(_ arg0: CharSequence?, _ arg1: Map<JavaObject, List<JavaCharacter>>?, _ arg2: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, List<JavaCharacter>>!

  @JavaStaticMethod
  public func groupByTo(_ arg0: CharSequence?, _ arg1: Map<JavaObject, List<JavaObject>>?, _ arg2: Function1<JavaObject, JavaObject>?, _ arg3: Function1<JavaObject, JavaObject>?) -> Map<JavaObject, List<JavaObject>>!

  @JavaStaticMethod
  public func mapIndexed(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func mapIndexedNotNull(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func mapIndexedNotNullTo(_ arg0: CharSequence?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func mapIndexedTo(_ arg0: CharSequence?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func mapNotNull(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func mapNotNullTo(_ arg0: CharSequence?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func mapTo(_ arg0: CharSequence?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func foldIndexed(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function3<JavaObject, JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaStaticMethod
  public func foldRight(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaStaticMethod
  public func foldRightIndexed(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function3<JavaObject, JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaStaticMethod
  public func forEachIndexed(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, Unit>?)

  @JavaStaticMethod
  public func maxOrThrow(_ arg0: CharSequence?) -> UInt16

  @JavaStaticMethod
  public func maxByOrThrow(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Comparable>?) -> UInt16

  @JavaStaticMethod
  public func maxByOrNull(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Comparable>?) -> JavaCharacter!

  @JavaStaticMethod
  public func maxOrNull(_ arg0: CharSequence?) -> JavaCharacter!

  @JavaStaticMethod
  public func minOrThrow(_ arg0: CharSequence?) -> UInt16

  @JavaStaticMethod
  public func minByOrThrow(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Comparable>?) -> UInt16

  @JavaStaticMethod
  public func minByOrNull(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Comparable>?) -> JavaCharacter!

  @JavaStaticMethod
  public func none(_ arg0: CharSequence?) -> Bool

  @JavaStaticMethod
  public func none(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Bool

  @JavaStaticMethod
  public func onEach(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Unit>?) -> CharSequence!

  @JavaStaticMethod
  public func onEachIndexed(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, Unit>?) -> CharSequence!

  @JavaStaticMethod
  public func reduceIndexed(_ arg0: CharSequence?, _ arg1: Function3<JavaObject, JavaObject, JavaObject, JavaCharacter>?) -> UInt16

  @JavaStaticMethod
  public func reduceIndexedOrNull(_ arg0: CharSequence?, _ arg1: Function3<JavaObject, JavaObject, JavaObject, JavaCharacter>?) -> JavaCharacter!

  @JavaStaticMethod
  public func reduceOrNull(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaCharacter>?) -> JavaCharacter!

  @JavaStaticMethod
  public func reduceRight(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaCharacter>?) -> UInt16

  @JavaStaticMethod
  public func reduceRightIndexed(_ arg0: CharSequence?, _ arg1: Function3<JavaObject, JavaObject, JavaObject, JavaCharacter>?) -> UInt16

  @JavaStaticMethod
  public func reduceRightIndexedOrNull(_ arg0: CharSequence?, _ arg1: Function3<JavaObject, JavaObject, JavaObject, JavaCharacter>?) -> JavaCharacter!

  @JavaStaticMethod
  public func reduceRightOrNull(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaCharacter>?) -> JavaCharacter!

  @JavaStaticMethod
  public func runningFold(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func runningFoldIndexed(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function3<JavaObject, JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func runningReduce(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaCharacter>?) -> List<JavaCharacter>!

  @JavaStaticMethod
  public func runningReduceIndexed(_ arg0: CharSequence?, _ arg1: Function3<JavaObject, JavaObject, JavaObject, JavaCharacter>?) -> List<JavaCharacter>!

  @JavaStaticMethod
  public func scanIndexed(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function3<JavaObject, JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func sumBy(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaInteger>?) -> Int32

  @JavaStaticMethod
  public func sumByDouble(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaDouble>?) -> Double

  @JavaStaticMethod
  public func chunked(_ arg0: CharSequence?, _ arg1: Int32) -> List<JavaString>!

  @JavaStaticMethod
  public func chunked(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Function1<JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func windowed(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool) -> List<JavaString>!

  @JavaStaticMethod
  public func windowed(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, _ arg4: Function1<JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func chunkedSequence(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Function1<JavaObject, JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func chunkedSequence(_ arg0: CharSequence?, _ arg1: Int32) -> Sequence<JavaString>!

  @JavaStaticMethod
  public func windowedSequence(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool) -> Sequence<JavaString>!

  @JavaStaticMethod
  public func windowedSequence(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, _ arg4: Function1<JavaObject, JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func windowed$default(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, _ arg4: Function1?, _ arg5: Int32, _ arg6: JavaObject?) -> List!

  @JavaStaticMethod
  public func windowed$default(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, _ arg4: Int32, _ arg5: JavaObject?) -> List!

  @JavaStaticMethod
  public func windowedSequence$default(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, _ arg4: Function1?, _ arg5: Int32, _ arg6: JavaObject?) -> Sequence!

  @JavaStaticMethod
  public func windowedSequence$default(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, _ arg4: Int32, _ arg5: JavaObject?) -> Sequence!

  @JavaStaticMethod
  public func asSequence(_ arg0: CharSequence?) -> Sequence<JavaCharacter>!

  @JavaStaticMethod
  public func zipWithNext(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func zipWithNext(_ arg0: CharSequence?) -> List<Pair<JavaCharacter, JavaCharacter>>!

  @JavaStaticMethod
  public func asIterable(_ arg0: CharSequence?) -> Iterable<JavaCharacter>!

  @JavaStaticMethod
  public func partition(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Pair<JavaString, JavaString>!

  @JavaStaticMethod
  public func partition(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Pair<CharSequence, CharSequence>!

  @JavaStaticMethod
  public func map(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func toList(_ arg0: CharSequence?) -> List<JavaCharacter>!

  @JavaStaticMethod
  public func count(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Int32

  @JavaStaticMethod
  public func last(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> UInt16

  @JavaStaticMethod
  public func last(_ arg0: CharSequence?) -> UInt16

  @JavaStaticMethod
  public func single(_ arg0: CharSequence?) -> UInt16

  @JavaStaticMethod
  public func single(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> UInt16

  @JavaStaticMethod
  public func filter(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func filter(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func first(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> UInt16

  @JavaStaticMethod
  public func first(_ arg0: CharSequence?) -> UInt16

  @JavaStaticMethod
  public func forEach(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Unit>?)

  @JavaStaticMethod
  public func toSet(_ arg0: CharSequence?) -> JavaSet<JavaCharacter>!

  @JavaStaticMethod
  public func withIndex(_ arg0: CharSequence?) -> Iterable<IndexedValue<JavaCharacter>>!

  @JavaStaticMethod
  public func reduce(_ arg0: CharSequence?, _ arg1: Function2<JavaObject, JavaObject, JavaCharacter>?) -> UInt16

  @JavaStaticMethod
  public func reversed(_ arg0: CharSequence?) -> CharSequence!

  @JavaStaticMethod
  public func slice(_ arg0: CharSequence?, _ arg1: IntRange?) -> CharSequence!

  @JavaStaticMethod
  public func slice(_ arg0: String, _ arg1: IntRange?) -> String

  @JavaStaticMethod
  public func slice(_ arg0: CharSequence?, _ arg1: Iterable<JavaInteger>?) -> CharSequence!

  @JavaStaticMethod
  public func all(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Bool

  @JavaStaticMethod
  public func random(_ arg0: CharSequence?, _ arg1: Random?) -> UInt16

  @JavaStaticMethod
  public func flatMap(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, Iterable<JavaObject>>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func scan(_ arg0: CharSequence?, _ arg1: JavaObject?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func takeWhile(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func takeWhile(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func dropWhile(_ arg0: String, _ arg1: Function1<JavaObject, JavaBoolean>?) -> String

  @JavaStaticMethod
  public func dropWhile(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> CharSequence!

  @JavaStaticMethod
  public func groupingBy(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaObject>?) -> Grouping<JavaCharacter, JavaObject>!

  @JavaStaticMethod
  public func take(_ arg0: CharSequence?, _ arg1: Int32) -> CharSequence!

  @JavaStaticMethod
  public func take(_ arg0: String, _ arg1: Int32) -> String

  @JavaStaticMethod
  public func toCollection(_ arg0: CharSequence?, _ arg1: JavaCollection<JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func zip(_ arg0: CharSequence?, _ arg1: CharSequence?) -> List<Pair<JavaCharacter, JavaCharacter>>!

  @JavaStaticMethod
  public func zip(_ arg0: CharSequence?, _ arg1: CharSequence?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func any(_ arg0: CharSequence?) -> Bool

  @JavaStaticMethod
  public func any(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Bool
}
