// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.text.RegexOption", implements: FlagEnum.self)
open class RegexOption: Enum {
  public enum RegexOptionCases: Equatable {
    case IGNORE_CASE
    case MULTILINE
    case LITERAL
    case UNIX_LINES
    case COMMENTS
    case DOT_MATCHES_ALL
    case CANON_EQ
  }

  public var enumValue: RegexOptionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.IGNORE_CASE?.as(JavaObject.self)) {
      return RegexOptionCases.IGNORE_CASE
    } else if self.equals(classObj.MULTILINE?.as(JavaObject.self)) {
      return RegexOptionCases.MULTILINE
    } else if self.equals(classObj.LITERAL?.as(JavaObject.self)) {
      return RegexOptionCases.LITERAL
    } else if self.equals(classObj.UNIX_LINES?.as(JavaObject.self)) {
      return RegexOptionCases.UNIX_LINES
    } else if self.equals(classObj.COMMENTS?.as(JavaObject.self)) {
      return RegexOptionCases.COMMENTS
    } else if self.equals(classObj.DOT_MATCHES_ALL?.as(JavaObject.self)) {
      return RegexOptionCases.DOT_MATCHES_ALL
    } else if self.equals(classObj.CANON_EQ?.as(JavaObject.self)) {
      return RegexOptionCases.CANON_EQ
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: RegexOptionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<RegexOption>(environment: _environment)
    switch enumValue {
      case .IGNORE_CASE:
        if let IGNORE_CASE = classObj.IGNORE_CASE {
          self.init(javaHolder: IGNORE_CASE.javaHolder)
        } else {
          fatalError("Enum value IGNORE_CASE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MULTILINE:
        if let MULTILINE = classObj.MULTILINE {
          self.init(javaHolder: MULTILINE.javaHolder)
        } else {
          fatalError("Enum value MULTILINE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LITERAL:
        if let LITERAL = classObj.LITERAL {
          self.init(javaHolder: LITERAL.javaHolder)
        } else {
          fatalError("Enum value LITERAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .UNIX_LINES:
        if let UNIX_LINES = classObj.UNIX_LINES {
          self.init(javaHolder: UNIX_LINES.javaHolder)
        } else {
          fatalError("Enum value UNIX_LINES was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COMMENTS:
        if let COMMENTS = classObj.COMMENTS {
          self.init(javaHolder: COMMENTS.javaHolder)
        } else {
          fatalError("Enum value COMMENTS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DOT_MATCHES_ALL:
        if let DOT_MATCHES_ALL = classObj.DOT_MATCHES_ALL {
          self.init(javaHolder: DOT_MATCHES_ALL.javaHolder)
        } else {
          fatalError("Enum value DOT_MATCHES_ALL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CANON_EQ:
        if let CANON_EQ = classObj.CANON_EQ {
          self.init(javaHolder: CANON_EQ.javaHolder)
        } else {
          fatalError("Enum value CANON_EQ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getValue() -> Int32

  @JavaMethod
  open func getMask() -> Int32
}
extension JavaClass<RegexOption> {
  @JavaStaticField(isFinal: true)
  public var IGNORE_CASE: RegexOption!

  @JavaStaticField(isFinal: true)
  public var MULTILINE: RegexOption!

  @JavaStaticField(isFinal: true)
  public var LITERAL: RegexOption!

  @JavaStaticField(isFinal: true)
  public var UNIX_LINES: RegexOption!

  @JavaStaticField(isFinal: true)
  public var COMMENTS: RegexOption!

  @JavaStaticField(isFinal: true)
  public var DOT_MATCHES_ALL: RegexOption!

  @JavaStaticField(isFinal: true)
  public var CANON_EQ: RegexOption!

  @JavaStaticMethod
  public func values() -> [RegexOption?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> RegexOption!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<RegexOption>!
}
