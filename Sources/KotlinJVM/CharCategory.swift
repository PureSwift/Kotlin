// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.text.CharCategory")
open class CharCategory: Enum {
  public enum CharCategoryCases: Equatable {
    case UNASSIGNED
    case UPPERCASE_LETTER
    case LOWERCASE_LETTER
    case TITLECASE_LETTER
    case MODIFIER_LETTER
    case OTHER_LETTER
    case NON_SPACING_MARK
    case ENCLOSING_MARK
    case COMBINING_SPACING_MARK
    case DECIMAL_DIGIT_NUMBER
    case LETTER_NUMBER
    case OTHER_NUMBER
    case SPACE_SEPARATOR
    case LINE_SEPARATOR
    case PARAGRAPH_SEPARATOR
    case CONTROL
    case FORMAT
    case PRIVATE_USE
    case SURROGATE
    case DASH_PUNCTUATION
    case START_PUNCTUATION
    case END_PUNCTUATION
    case CONNECTOR_PUNCTUATION
    case OTHER_PUNCTUATION
    case MATH_SYMBOL
    case CURRENCY_SYMBOL
    case MODIFIER_SYMBOL
    case OTHER_SYMBOL
    case INITIAL_QUOTE_PUNCTUATION
    case FINAL_QUOTE_PUNCTUATION
  }

  public var enumValue: CharCategoryCases! {
    let classObj = self.javaClass
    if self.equals(classObj.UNASSIGNED?.as(JavaObject.self)) {
      return CharCategoryCases.UNASSIGNED
    } else if self.equals(classObj.UPPERCASE_LETTER?.as(JavaObject.self)) {
      return CharCategoryCases.UPPERCASE_LETTER
    } else if self.equals(classObj.LOWERCASE_LETTER?.as(JavaObject.self)) {
      return CharCategoryCases.LOWERCASE_LETTER
    } else if self.equals(classObj.TITLECASE_LETTER?.as(JavaObject.self)) {
      return CharCategoryCases.TITLECASE_LETTER
    } else if self.equals(classObj.MODIFIER_LETTER?.as(JavaObject.self)) {
      return CharCategoryCases.MODIFIER_LETTER
    } else if self.equals(classObj.OTHER_LETTER?.as(JavaObject.self)) {
      return CharCategoryCases.OTHER_LETTER
    } else if self.equals(classObj.NON_SPACING_MARK?.as(JavaObject.self)) {
      return CharCategoryCases.NON_SPACING_MARK
    } else if self.equals(classObj.ENCLOSING_MARK?.as(JavaObject.self)) {
      return CharCategoryCases.ENCLOSING_MARK
    } else if self.equals(classObj.COMBINING_SPACING_MARK?.as(JavaObject.self)) {
      return CharCategoryCases.COMBINING_SPACING_MARK
    } else if self.equals(classObj.DECIMAL_DIGIT_NUMBER?.as(JavaObject.self)) {
      return CharCategoryCases.DECIMAL_DIGIT_NUMBER
    } else if self.equals(classObj.LETTER_NUMBER?.as(JavaObject.self)) {
      return CharCategoryCases.LETTER_NUMBER
    } else if self.equals(classObj.OTHER_NUMBER?.as(JavaObject.self)) {
      return CharCategoryCases.OTHER_NUMBER
    } else if self.equals(classObj.SPACE_SEPARATOR?.as(JavaObject.self)) {
      return CharCategoryCases.SPACE_SEPARATOR
    } else if self.equals(classObj.LINE_SEPARATOR?.as(JavaObject.self)) {
      return CharCategoryCases.LINE_SEPARATOR
    } else if self.equals(classObj.PARAGRAPH_SEPARATOR?.as(JavaObject.self)) {
      return CharCategoryCases.PARAGRAPH_SEPARATOR
    } else if self.equals(classObj.CONTROL?.as(JavaObject.self)) {
      return CharCategoryCases.CONTROL
    } else if self.equals(classObj.FORMAT?.as(JavaObject.self)) {
      return CharCategoryCases.FORMAT
    } else if self.equals(classObj.PRIVATE_USE?.as(JavaObject.self)) {
      return CharCategoryCases.PRIVATE_USE
    } else if self.equals(classObj.SURROGATE?.as(JavaObject.self)) {
      return CharCategoryCases.SURROGATE
    } else if self.equals(classObj.DASH_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.DASH_PUNCTUATION
    } else if self.equals(classObj.START_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.START_PUNCTUATION
    } else if self.equals(classObj.END_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.END_PUNCTUATION
    } else if self.equals(classObj.CONNECTOR_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.CONNECTOR_PUNCTUATION
    } else if self.equals(classObj.OTHER_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.OTHER_PUNCTUATION
    } else if self.equals(classObj.MATH_SYMBOL?.as(JavaObject.self)) {
      return CharCategoryCases.MATH_SYMBOL
    } else if self.equals(classObj.CURRENCY_SYMBOL?.as(JavaObject.self)) {
      return CharCategoryCases.CURRENCY_SYMBOL
    } else if self.equals(classObj.MODIFIER_SYMBOL?.as(JavaObject.self)) {
      return CharCategoryCases.MODIFIER_SYMBOL
    } else if self.equals(classObj.OTHER_SYMBOL?.as(JavaObject.self)) {
      return CharCategoryCases.OTHER_SYMBOL
    } else if self.equals(classObj.INITIAL_QUOTE_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.INITIAL_QUOTE_PUNCTUATION
    } else if self.equals(classObj.FINAL_QUOTE_PUNCTUATION?.as(JavaObject.self)) {
      return CharCategoryCases.FINAL_QUOTE_PUNCTUATION
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: CharCategoryCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<CharCategory>(environment: _environment)
    switch enumValue {
      case .UNASSIGNED:
        if let UNASSIGNED = classObj.UNASSIGNED {
          self.init(javaHolder: UNASSIGNED.javaHolder)
        } else {
          fatalError("Enum value UNASSIGNED was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .UPPERCASE_LETTER:
        if let UPPERCASE_LETTER = classObj.UPPERCASE_LETTER {
          self.init(javaHolder: UPPERCASE_LETTER.javaHolder)
        } else {
          fatalError("Enum value UPPERCASE_LETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LOWERCASE_LETTER:
        if let LOWERCASE_LETTER = classObj.LOWERCASE_LETTER {
          self.init(javaHolder: LOWERCASE_LETTER.javaHolder)
        } else {
          fatalError("Enum value LOWERCASE_LETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TITLECASE_LETTER:
        if let TITLECASE_LETTER = classObj.TITLECASE_LETTER {
          self.init(javaHolder: TITLECASE_LETTER.javaHolder)
        } else {
          fatalError("Enum value TITLECASE_LETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MODIFIER_LETTER:
        if let MODIFIER_LETTER = classObj.MODIFIER_LETTER {
          self.init(javaHolder: MODIFIER_LETTER.javaHolder)
        } else {
          fatalError("Enum value MODIFIER_LETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHER_LETTER:
        if let OTHER_LETTER = classObj.OTHER_LETTER {
          self.init(javaHolder: OTHER_LETTER.javaHolder)
        } else {
          fatalError("Enum value OTHER_LETTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NON_SPACING_MARK:
        if let NON_SPACING_MARK = classObj.NON_SPACING_MARK {
          self.init(javaHolder: NON_SPACING_MARK.javaHolder)
        } else {
          fatalError("Enum value NON_SPACING_MARK was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ENCLOSING_MARK:
        if let ENCLOSING_MARK = classObj.ENCLOSING_MARK {
          self.init(javaHolder: ENCLOSING_MARK.javaHolder)
        } else {
          fatalError("Enum value ENCLOSING_MARK was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COMBINING_SPACING_MARK:
        if let COMBINING_SPACING_MARK = classObj.COMBINING_SPACING_MARK {
          self.init(javaHolder: COMBINING_SPACING_MARK.javaHolder)
        } else {
          fatalError("Enum value COMBINING_SPACING_MARK was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DECIMAL_DIGIT_NUMBER:
        if let DECIMAL_DIGIT_NUMBER = classObj.DECIMAL_DIGIT_NUMBER {
          self.init(javaHolder: DECIMAL_DIGIT_NUMBER.javaHolder)
        } else {
          fatalError("Enum value DECIMAL_DIGIT_NUMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LETTER_NUMBER:
        if let LETTER_NUMBER = classObj.LETTER_NUMBER {
          self.init(javaHolder: LETTER_NUMBER.javaHolder)
        } else {
          fatalError("Enum value LETTER_NUMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHER_NUMBER:
        if let OTHER_NUMBER = classObj.OTHER_NUMBER {
          self.init(javaHolder: OTHER_NUMBER.javaHolder)
        } else {
          fatalError("Enum value OTHER_NUMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SPACE_SEPARATOR:
        if let SPACE_SEPARATOR = classObj.SPACE_SEPARATOR {
          self.init(javaHolder: SPACE_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value SPACE_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LINE_SEPARATOR:
        if let LINE_SEPARATOR = classObj.LINE_SEPARATOR {
          self.init(javaHolder: LINE_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value LINE_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PARAGRAPH_SEPARATOR:
        if let PARAGRAPH_SEPARATOR = classObj.PARAGRAPH_SEPARATOR {
          self.init(javaHolder: PARAGRAPH_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value PARAGRAPH_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CONTROL:
        if let CONTROL = classObj.CONTROL {
          self.init(javaHolder: CONTROL.javaHolder)
        } else {
          fatalError("Enum value CONTROL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FORMAT:
        if let FORMAT = classObj.FORMAT {
          self.init(javaHolder: FORMAT.javaHolder)
        } else {
          fatalError("Enum value FORMAT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PRIVATE_USE:
        if let PRIVATE_USE = classObj.PRIVATE_USE {
          self.init(javaHolder: PRIVATE_USE.javaHolder)
        } else {
          fatalError("Enum value PRIVATE_USE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SURROGATE:
        if let SURROGATE = classObj.SURROGATE {
          self.init(javaHolder: SURROGATE.javaHolder)
        } else {
          fatalError("Enum value SURROGATE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DASH_PUNCTUATION:
        if let DASH_PUNCTUATION = classObj.DASH_PUNCTUATION {
          self.init(javaHolder: DASH_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value DASH_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .START_PUNCTUATION:
        if let START_PUNCTUATION = classObj.START_PUNCTUATION {
          self.init(javaHolder: START_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value START_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .END_PUNCTUATION:
        if let END_PUNCTUATION = classObj.END_PUNCTUATION {
          self.init(javaHolder: END_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value END_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CONNECTOR_PUNCTUATION:
        if let CONNECTOR_PUNCTUATION = classObj.CONNECTOR_PUNCTUATION {
          self.init(javaHolder: CONNECTOR_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value CONNECTOR_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHER_PUNCTUATION:
        if let OTHER_PUNCTUATION = classObj.OTHER_PUNCTUATION {
          self.init(javaHolder: OTHER_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value OTHER_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MATH_SYMBOL:
        if let MATH_SYMBOL = classObj.MATH_SYMBOL {
          self.init(javaHolder: MATH_SYMBOL.javaHolder)
        } else {
          fatalError("Enum value MATH_SYMBOL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CURRENCY_SYMBOL:
        if let CURRENCY_SYMBOL = classObj.CURRENCY_SYMBOL {
          self.init(javaHolder: CURRENCY_SYMBOL.javaHolder)
        } else {
          fatalError("Enum value CURRENCY_SYMBOL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MODIFIER_SYMBOL:
        if let MODIFIER_SYMBOL = classObj.MODIFIER_SYMBOL {
          self.init(javaHolder: MODIFIER_SYMBOL.javaHolder)
        } else {
          fatalError("Enum value MODIFIER_SYMBOL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHER_SYMBOL:
        if let OTHER_SYMBOL = classObj.OTHER_SYMBOL {
          self.init(javaHolder: OTHER_SYMBOL.javaHolder)
        } else {
          fatalError("Enum value OTHER_SYMBOL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .INITIAL_QUOTE_PUNCTUATION:
        if let INITIAL_QUOTE_PUNCTUATION = classObj.INITIAL_QUOTE_PUNCTUATION {
          self.init(javaHolder: INITIAL_QUOTE_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value INITIAL_QUOTE_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FINAL_QUOTE_PUNCTUATION:
        if let FINAL_QUOTE_PUNCTUATION = classObj.FINAL_QUOTE_PUNCTUATION {
          self.init(javaHolder: FINAL_QUOTE_PUNCTUATION.javaHolder)
        } else {
          fatalError("Enum value FINAL_QUOTE_PUNCTUATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getCode() -> String

  @JavaMethod
  open func getValue() -> Int32

  @JavaMethod
  open func contains(_ arg0: UInt16) -> Bool
}
extension JavaClass<CharCategory> {
  @JavaStaticField(isFinal: true)
  public var Companion: CharCategory.Companion!

  @JavaStaticField(isFinal: true)
  public var UNASSIGNED: CharCategory!

  @JavaStaticField(isFinal: true)
  public var UPPERCASE_LETTER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var LOWERCASE_LETTER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var TITLECASE_LETTER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var MODIFIER_LETTER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var OTHER_LETTER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var NON_SPACING_MARK: CharCategory!

  @JavaStaticField(isFinal: true)
  public var ENCLOSING_MARK: CharCategory!

  @JavaStaticField(isFinal: true)
  public var COMBINING_SPACING_MARK: CharCategory!

  @JavaStaticField(isFinal: true)
  public var DECIMAL_DIGIT_NUMBER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var LETTER_NUMBER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var OTHER_NUMBER: CharCategory!

  @JavaStaticField(isFinal: true)
  public var SPACE_SEPARATOR: CharCategory!

  @JavaStaticField(isFinal: true)
  public var LINE_SEPARATOR: CharCategory!

  @JavaStaticField(isFinal: true)
  public var PARAGRAPH_SEPARATOR: CharCategory!

  @JavaStaticField(isFinal: true)
  public var CONTROL: CharCategory!

  @JavaStaticField(isFinal: true)
  public var FORMAT: CharCategory!

  @JavaStaticField(isFinal: true)
  public var PRIVATE_USE: CharCategory!

  @JavaStaticField(isFinal: true)
  public var SURROGATE: CharCategory!

  @JavaStaticField(isFinal: true)
  public var DASH_PUNCTUATION: CharCategory!

  @JavaStaticField(isFinal: true)
  public var START_PUNCTUATION: CharCategory!

  @JavaStaticField(isFinal: true)
  public var END_PUNCTUATION: CharCategory!

  @JavaStaticField(isFinal: true)
  public var CONNECTOR_PUNCTUATION: CharCategory!

  @JavaStaticField(isFinal: true)
  public var OTHER_PUNCTUATION: CharCategory!

  @JavaStaticField(isFinal: true)
  public var MATH_SYMBOL: CharCategory!

  @JavaStaticField(isFinal: true)
  public var CURRENCY_SYMBOL: CharCategory!

  @JavaStaticField(isFinal: true)
  public var MODIFIER_SYMBOL: CharCategory!

  @JavaStaticField(isFinal: true)
  public var OTHER_SYMBOL: CharCategory!

  @JavaStaticField(isFinal: true)
  public var INITIAL_QUOTE_PUNCTUATION: CharCategory!

  @JavaStaticField(isFinal: true)
  public var FINAL_QUOTE_PUNCTUATION: CharCategory!

  @JavaStaticMethod
  public func values() -> [CharCategory?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> CharCategory!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<CharCategory>!
}
