// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.contracts.InvocationKind")
open class InvocationKind: Enum {
  public enum InvocationKindCases: Equatable {
    case AT_MOST_ONCE
    case AT_LEAST_ONCE
    case EXACTLY_ONCE
    case UNKNOWN
  }

  public var enumValue: InvocationKindCases! {
    let classObj = self.javaClass
    if self.equals(classObj.AT_MOST_ONCE?.as(JavaObject.self)) {
      return InvocationKindCases.AT_MOST_ONCE
    } else if self.equals(classObj.AT_LEAST_ONCE?.as(JavaObject.self)) {
      return InvocationKindCases.AT_LEAST_ONCE
    } else if self.equals(classObj.EXACTLY_ONCE?.as(JavaObject.self)) {
      return InvocationKindCases.EXACTLY_ONCE
    } else if self.equals(classObj.UNKNOWN?.as(JavaObject.self)) {
      return InvocationKindCases.UNKNOWN
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: InvocationKindCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<InvocationKind>(environment: _environment)
    switch enumValue {
      case .AT_MOST_ONCE:
        if let AT_MOST_ONCE = classObj.AT_MOST_ONCE {
          self.init(javaHolder: AT_MOST_ONCE.javaHolder)
        } else {
          fatalError("Enum value AT_MOST_ONCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .AT_LEAST_ONCE:
        if let AT_LEAST_ONCE = classObj.AT_LEAST_ONCE {
          self.init(javaHolder: AT_LEAST_ONCE.javaHolder)
        } else {
          fatalError("Enum value AT_LEAST_ONCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXACTLY_ONCE:
        if let EXACTLY_ONCE = classObj.EXACTLY_ONCE {
          self.init(javaHolder: EXACTLY_ONCE.javaHolder)
        } else {
          fatalError("Enum value EXACTLY_ONCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .UNKNOWN:
        if let UNKNOWN = classObj.UNKNOWN {
          self.init(javaHolder: UNKNOWN.javaHolder)
        } else {
          fatalError("Enum value UNKNOWN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<InvocationKind> {
  @JavaStaticField(isFinal: true)
  public var AT_MOST_ONCE: InvocationKind!

  @JavaStaticField(isFinal: true)
  public var AT_LEAST_ONCE: InvocationKind!

  @JavaStaticField(isFinal: true)
  public var EXACTLY_ONCE: InvocationKind!

  @JavaStaticField(isFinal: true)
  public var UNKNOWN: InvocationKind!

  @JavaStaticMethod
  public func values() -> [InvocationKind?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> InvocationKind!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<InvocationKind>!
}
