// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitReflection
import JavaLang
import JavaRuntime

@JavaClass("kotlin.jvm.JvmClassMappingKt")
open class JvmClassMappingKt: JavaObject {

}
extension JavaClass<JvmClassMappingKt> {
  @JavaStaticMethod
  public func getRuntimeClassOfKClassInstance$annotations(_ arg0: KClass?)

  @JavaStaticMethod
  public func getJavaClass$annotations(_ arg0: KClass?)

  @JavaStaticMethod
  public func getJavaPrimitiveType(_ arg0: KClass<JavaObject>?) -> JavaClass<JavaObject>!

  @JavaStaticMethod
  public func getRuntimeClassOfKClassInstance(_ arg0: KClass<JavaObject>?) -> JavaClass<KClass<JavaObject>>!

  @JavaStaticMethod
  public func getDeclaringJavaClass$annotations(_ arg0: Enum?)

  @JavaStaticMethod
  public func getJavaClass(_ arg0: KClass<JavaObject>?) -> JavaClass<JavaObject>!

  @JavaStaticMethod
  public func getJavaClass(_ arg0: JavaObject?) -> JavaClass<JavaObject>!

  @JavaStaticMethod
  public func getJavaObjectType(_ arg0: KClass<JavaObject>?) -> JavaClass<JavaObject>!

  @JavaStaticMethod
  public func getKotlinClass(_ arg0: JavaClass<JavaObject>?) -> KClass<JavaObject>!

  @JavaStaticMethod
  public func isArrayOf(_ arg0: [JavaObject?]) -> Bool

  @JavaStaticMethod
  public func getAnnotationClass(_ arg0: Annotation?) -> KClass<Annotation>!
}
