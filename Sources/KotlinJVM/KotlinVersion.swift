// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.KotlinVersion", implements: Comparable<KotlinVersion>.self)
open class KotlinVersion: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: KotlinVersion?) -> Int32

  @JavaMethod
  open func getMinor() -> Int32

  @JavaMethod
  open func getMajor() -> Int32

  @JavaMethod
  open func getPatch() -> Int32

  @JavaMethod
  open func isAtLeast(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Bool

  @JavaMethod
  open func isAtLeast(_ arg0: Int32, _ arg1: Int32) -> Bool
}
extension JavaClass<KotlinVersion> {
  @JavaStaticField(isFinal: true)
  public var Companion: KotlinVersion.Companion!

  @JavaStaticField(isFinal: true)
  public var MAX_COMPONENT_VALUE: Int32

  @JavaStaticField(isFinal: true)
  public var CURRENT: KotlinVersion!
}
