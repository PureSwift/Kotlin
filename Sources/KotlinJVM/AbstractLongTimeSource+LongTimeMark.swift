// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension AbstractLongTimeSource {
  @JavaClass("kotlin.time.AbstractLongTimeSource$LongTimeMark", implements: ComparableTimeMark.self)
  open class LongTimeMark: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int64, _ arg1: AbstractLongTimeSource?, _ arg2: Int64, _ arg3: DefaultConstructorMarker?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: ComparableTimeMark?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func`elapsedNow-UwyO8pc`() -> Int64

  @JavaMethod
  open func`minus-LRDsOJo`(_ arg0: Int64) -> TimeMark!

  @JavaMethod
  open func`minus-LRDsOJo`(_ arg0: Int64) -> ComparableTimeMark!

  @JavaMethod
  open func`plus-LRDsOJo`(_ arg0: Int64) -> ComparableTimeMark!

  @JavaMethod
  open func`plus-LRDsOJo`(_ arg0: Int64) -> TimeMark!

  @JavaMethod
  open func`minus-UwyO8pc`(_ arg0: ComparableTimeMark?) -> Int64

  @JavaMethod
  open func hasPassedNow() -> Bool

  @JavaMethod
  open func hasNotPassedNow() -> Bool
  }
}
