// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.jvm.optionals.OptionalsKt")
open class OptionalsKt: JavaObject {

}
extension JavaClass<OptionalsKt> {
  @JavaStaticMethod
  public func toList(_ arg0: JavaOptional<JavaObject>?) -> List<JavaObject>!

  public func toListOptional(_ arg0: JavaObject?) -> List<JavaObject>! {
    toList(arg0.toJavaOptional())
  }

  @JavaStaticMethod
  public func getOrDefault(_ arg0: JavaOptional<JavaObject>?, _ arg1: JavaObject?) -> JavaObject!

  public func getOrDefaultOptional(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject! {
    getOrDefault(arg0.toJavaOptional(), arg1)
  }

  @JavaStaticMethod
  public func toSet(_ arg0: JavaOptional<JavaObject>?) -> JavaSet<JavaObject>!

  public func toSetOptional(_ arg0: JavaObject?) -> JavaSet<JavaObject>! {
    toSet(arg0.toJavaOptional())
  }

  @JavaStaticMethod
  public func toCollection(_ arg0: JavaOptional<JavaObject>?, _ arg1: JavaCollection<JavaObject>?) -> JavaCollection<JavaObject>!

  public func toCollectionOptional(_ arg0: JavaObject?, _ arg1: JavaCollection<JavaObject>?) -> JavaCollection<JavaObject>! {
    toCollection(arg0.toJavaOptional(), arg1)
  }

  @JavaStaticMethod
  public func asSequence(_ arg0: JavaOptional<JavaObject>?) -> Sequence<JavaObject>!

  public func asSequenceOptional(_ arg0: JavaObject?) -> Sequence<JavaObject>! {
    asSequence(arg0.toJavaOptional())
  }

  @JavaStaticMethod
  public func getOrNull(_ arg0: JavaOptional<JavaObject>?) -> JavaObject!

  public func getOrNullOptional(_ arg0: JavaObject?) -> JavaObject! {
    getOrNull(arg0.toJavaOptional())
  }

  @JavaStaticMethod
  public func getOrElse(_ arg0: JavaOptional<JavaObject>?, _ arg1: Function0<JavaObject>?) -> JavaObject!

  public func getOrElseOptional(_ arg0: JavaObject?, _ arg1: Function0<JavaObject>?) -> JavaObject! {
    getOrElse(arg0.toJavaOptional(), arg1)
  }
}
