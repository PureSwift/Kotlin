// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime
import JavaUtil

@JavaInterface("kotlin.collections.MutableMapWithDefault", extends: Map<JavaObject, JavaObject>.self, MapWithDefault<JavaObject, JavaObject>.self, KMutableMap.self)
public struct MutableMapWithDefault<K: AnyJavaObject, V: AnyJavaObject> {
  @JavaMethod
  public func getMap() -> Map<JavaObject, JavaObject>!

  @JavaMethod
  public func remove(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Bool

  @JavaMethod
  public func remove(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func size() -> Int32

  @JavaMethod
  public func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func put(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func values() -> JavaCollection<JavaObject>!

  @JavaMethod
  public func hashCode() -> Int32

  @JavaMethod
  public func clear()

  @JavaMethod
  public func isEmpty() -> Bool

  @JavaMethod
  public func replace(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  public func replace(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func replaceAll(_ arg0: JavaBiFunction<JavaObject, JavaObject, JavaObject>?)

  @JavaMethod
  public func merge(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func entrySet() -> JavaSet<Map.Entry<JavaObject, JavaObject>>!

  @JavaMethod
  public func putAll(_ arg0: Map<JavaObject, JavaObject>?)

  @JavaMethod
  public func putIfAbsent(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func compute(_ arg0: JavaObject?, _ arg1: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func computeIfAbsent(_ arg0: JavaObject?, _ arg1: JavaFunction<JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func forEach(_ arg0: JavaBiConsumer<JavaObject, JavaObject>?)

  @JavaMethod
  public func keySet() -> JavaSet<JavaObject>!

  @JavaMethod
  public func containsValue(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func containsKey(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func computeIfPresent(_ arg0: JavaObject?, _ arg1: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func getOrImplicitDefault(_ arg0: JavaObject?) -> JavaObject!
}
