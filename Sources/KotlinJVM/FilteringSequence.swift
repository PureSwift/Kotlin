// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.sequences.FilteringSequence", implements: Sequence<JavaObject>.self)
open class FilteringSequence<T: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Sequence<JavaObject>?, _ arg1: Bool, _ arg2: Function1<JavaObject, JavaBoolean>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func iterator() -> JavaIterator<JavaObject>!
}
extension JavaClass {
  @JavaStaticMethod
  public func access$getSequence$p<T: AnyJavaObject>(_ arg0: FilteringSequence?) -> Sequence! where ObjectType == FilteringSequence<T>

  @JavaStaticMethod
  public func access$getPredicate$p<T: AnyJavaObject>(_ arg0: FilteringSequence?) -> Function1! where ObjectType == FilteringSequence<T>

  @JavaStaticMethod
  public func access$getSendWhen$p<T: AnyJavaObject>(_ arg0: FilteringSequence?) -> Bool where ObjectType == FilteringSequence<T>
}
