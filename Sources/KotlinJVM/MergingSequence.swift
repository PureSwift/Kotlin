// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.sequences.MergingSequence", implements: Sequence<JavaObject>.self)
open class MergingSequence<T1: AnyJavaObject, T2: AnyJavaObject, V: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Sequence<JavaObject>?, _ arg1: Sequence<JavaObject>?, _ arg2: Function2<JavaObject, JavaObject, JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func iterator() -> JavaIterator<JavaObject>!
}
extension JavaClass {
  @JavaStaticMethod
  public func access$getSequence1$p<T1: AnyJavaObject, T2: AnyJavaObject, V: AnyJavaObject>(_ arg0: MergingSequence?) -> Sequence! where ObjectType == MergingSequence<T1, T2, V>

  @JavaStaticMethod
  public func access$getSequence2$p<T1: AnyJavaObject, T2: AnyJavaObject, V: AnyJavaObject>(_ arg0: MergingSequence?) -> Sequence! where ObjectType == MergingSequence<T1, T2, V>

  @JavaStaticMethod
  public func access$getTransform$p<T1: AnyJavaObject, T2: AnyJavaObject, V: AnyJavaObject>(_ arg0: MergingSequence?) -> Function2! where ObjectType == MergingSequence<T1, T2, V>
}
