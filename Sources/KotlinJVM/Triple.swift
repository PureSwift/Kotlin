// Auto-generated by Java-to-Swift wrapper generator.
import JavaIO
import JavaKit
import JavaRuntime

@JavaClass("kotlin.Triple", implements: Serializable.self)
open class Triple<A: AnyJavaObject, B: AnyJavaObject, C: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func component1() -> JavaObject!

  @JavaMethod
  open func component2() -> JavaObject!

  @JavaMethod
  open func getThird() -> JavaObject!

  @JavaMethod
  open func component3() -> JavaObject!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func copy(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Triple<JavaObject, JavaObject, JavaObject>!

  @JavaMethod
  open func getFirst() -> JavaObject!

  @JavaMethod
  open func getSecond() -> JavaObject!
}
extension JavaClass {
  @JavaStaticMethod
  public func copy$default<A: AnyJavaObject, B: AnyJavaObject, C: AnyJavaObject>(_ arg0: Triple?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: Int32, _ arg5: JavaObject?) -> Triple! where ObjectType == Triple<A, B, C>
}
