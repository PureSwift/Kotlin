// Auto-generated by Java-to-Swift wrapper generator.
import JavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.text.Regex", implements: Serializable.self)
open class Regex: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: JavaSet<RegexOption>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: RegexOption?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func replace(_ arg0: CharSequence?, _ arg1: String) -> String

  @JavaMethod
  open func replace(_ arg0: CharSequence?, _ arg1: Function1<JavaObject, CharSequence>?) -> String

  @JavaMethod
  open func matches(_ arg0: CharSequence?) -> Bool

  @JavaMethod
  open func replaceFirst(_ arg0: CharSequence?, _ arg1: String) -> String

  @JavaMethod
  open func split(_ arg0: CharSequence?, _ arg1: Int32) -> List<JavaString>!

  @JavaMethod
  open func find(_ arg0: CharSequence?, _ arg1: Int32) -> MatchResult!

  @JavaMethod
  open func findAll(_ arg0: CharSequence?, _ arg1: Int32) -> Sequence<MatchResult>!

  @JavaMethod
  open func getPattern() -> String

  @JavaMethod
  open func getOptions() -> JavaSet<RegexOption>!

  @JavaMethod
  open func containsMatchIn(_ arg0: CharSequence?) -> Bool

  @JavaMethod
  open func matchEntire(_ arg0: CharSequence?) -> MatchResult!

  @JavaMethod
  open func matchAt(_ arg0: CharSequence?, _ arg1: Int32) -> MatchResult!

  @JavaMethod
  open func matchesAt(_ arg0: CharSequence?, _ arg1: Int32) -> Bool

  @JavaMethod
  open func splitToSequence(_ arg0: CharSequence?, _ arg1: Int32) -> Sequence<JavaString>!
}
extension JavaClass<Regex> {
  @JavaStaticField(isFinal: true)
  public var Companion: Regex.Companion!

  @JavaStaticMethod
  public func splitToSequence$default(_ arg0: Regex?, _ arg1: CharSequence?, _ arg2: Int32, _ arg3: Int32, _ arg4: JavaObject?) -> Sequence!

  @JavaStaticMethod
  public func find$default(_ arg0: Regex?, _ arg1: CharSequence?, _ arg2: Int32, _ arg3: Int32, _ arg4: JavaObject?) -> MatchResult!

  @JavaStaticMethod
  public func findAll$default(_ arg0: Regex?, _ arg1: CharSequence?, _ arg2: Int32, _ arg3: Int32, _ arg4: JavaObject?) -> Sequence!

  @JavaStaticMethod
  public func split$default(_ arg0: Regex?, _ arg1: CharSequence?, _ arg2: Int32, _ arg3: Int32, _ arg4: JavaObject?) -> List!
}
