// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension Base64 {
  @JavaClass("kotlin.io.encoding.Base64$PaddingOption")
  open class PaddingOption: JavaObject {
    public enum PaddingOptionCases: Equatable {
      case PRESENT
  case ABSENT
  case PRESENT_OPTIONAL
  case ABSENT_OPTIONAL
    }

    public var enumValue: PaddingOptionCases! {
      let classObj = self.javaClass
      if self.equals(classObj.PRESENT?.as(JavaObject.self)) {
        return PaddingOptionCases.PRESENT
  } else if self.equals(classObj.ABSENT?.as(JavaObject.self)) {
        return PaddingOptionCases.ABSENT
  } else if self.equals(classObj.PRESENT_OPTIONAL?.as(JavaObject.self)) {
        return PaddingOptionCases.PRESENT_OPTIONAL
  } else if self.equals(classObj.ABSENT_OPTIONAL?.as(JavaObject.self)) {
        return PaddingOptionCases.ABSENT_OPTIONAL
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: PaddingOptionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<PaddingOption>(environment: _environment)
    switch enumValue {
      case .PRESENT:
        if let PRESENT = classObj.PRESENT {
          self.init(javaHolder: PRESENT.javaHolder)
        } else {
          fatalError("Enum value PRESENT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ABSENT:
        if let ABSENT = classObj.ABSENT {
          self.init(javaHolder: ABSENT.javaHolder)
        } else {
          fatalError("Enum value ABSENT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PRESENT_OPTIONAL:
        if let PRESENT_OPTIONAL = classObj.PRESENT_OPTIONAL {
          self.init(javaHolder: PRESENT_OPTIONAL.javaHolder)
        } else {
          fatalError("Enum value PRESENT_OPTIONAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ABSENT_OPTIONAL:
        if let ABSENT_OPTIONAL = classObj.ABSENT_OPTIONAL {
          self.init(javaHolder: ABSENT_OPTIONAL.javaHolder)
        } else {
          fatalError("Enum value ABSENT_OPTIONAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Base64.PaddingOption> {
  @JavaStaticField(isFinal: true)
  public var PRESENT: Base64.PaddingOption!

  @JavaStaticField(isFinal: true)
  public var ABSENT: Base64.PaddingOption!

  @JavaStaticField(isFinal: true)
  public var PRESENT_OPTIONAL: Base64.PaddingOption!

  @JavaStaticField(isFinal: true)
  public var ABSENT_OPTIONAL: Base64.PaddingOption!

  @JavaStaticMethod
  public func values() -> [Base64.PaddingOption?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Base64.PaddingOption!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<Base64.PaddingOption>!
}
