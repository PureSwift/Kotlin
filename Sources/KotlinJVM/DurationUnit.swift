// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.time.DurationUnit")
open class DurationUnit: JavaObject {
  public enum DurationUnitCases: Equatable {
    case NANOSECONDS
    case MICROSECONDS
    case MILLISECONDS
    case SECONDS
    case MINUTES
    case HOURS
    case DAYS
  }

  public var enumValue: DurationUnitCases! {
    let classObj = self.javaClass
    if self.equals(classObj.NANOSECONDS?.as(JavaObject.self)) {
      return DurationUnitCases.NANOSECONDS
    } else if self.equals(classObj.MICROSECONDS?.as(JavaObject.self)) {
      return DurationUnitCases.MICROSECONDS
    } else if self.equals(classObj.MILLISECONDS?.as(JavaObject.self)) {
      return DurationUnitCases.MILLISECONDS
    } else if self.equals(classObj.SECONDS?.as(JavaObject.self)) {
      return DurationUnitCases.SECONDS
    } else if self.equals(classObj.MINUTES?.as(JavaObject.self)) {
      return DurationUnitCases.MINUTES
    } else if self.equals(classObj.HOURS?.as(JavaObject.self)) {
      return DurationUnitCases.HOURS
    } else if self.equals(classObj.DAYS?.as(JavaObject.self)) {
      return DurationUnitCases.DAYS
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: DurationUnitCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<DurationUnit>(environment: _environment)
    switch enumValue {
      case .NANOSECONDS:
        if let NANOSECONDS = classObj.NANOSECONDS {
          self.init(javaHolder: NANOSECONDS.javaHolder)
        } else {
          fatalError("Enum value NANOSECONDS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MICROSECONDS:
        if let MICROSECONDS = classObj.MICROSECONDS {
          self.init(javaHolder: MICROSECONDS.javaHolder)
        } else {
          fatalError("Enum value MICROSECONDS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MILLISECONDS:
        if let MILLISECONDS = classObj.MILLISECONDS {
          self.init(javaHolder: MILLISECONDS.javaHolder)
        } else {
          fatalError("Enum value MILLISECONDS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SECONDS:
        if let SECONDS = classObj.SECONDS {
          self.init(javaHolder: SECONDS.javaHolder)
        } else {
          fatalError("Enum value SECONDS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MINUTES:
        if let MINUTES = classObj.MINUTES {
          self.init(javaHolder: MINUTES.javaHolder)
        } else {
          fatalError("Enum value MINUTES was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HOURS:
        if let HOURS = classObj.HOURS {
          self.init(javaHolder: HOURS.javaHolder)
        } else {
          fatalError("Enum value HOURS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DAYS:
        if let DAYS = classObj.DAYS {
          self.init(javaHolder: DAYS.javaHolder)
        } else {
          fatalError("Enum value DAYS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<DurationUnit> {
  @JavaStaticField(isFinal: true)
  public var NANOSECONDS: DurationUnit!

  @JavaStaticField(isFinal: true)
  public var MICROSECONDS: DurationUnit!

  @JavaStaticField(isFinal: true)
  public var MILLISECONDS: DurationUnit!

  @JavaStaticField(isFinal: true)
  public var SECONDS: DurationUnit!

  @JavaStaticField(isFinal: true)
  public var MINUTES: DurationUnit!

  @JavaStaticField(isFinal: true)
  public var HOURS: DurationUnit!

  @JavaStaticField(isFinal: true)
  public var DAYS: DurationUnit!

  @JavaStaticMethod
  public func values() -> [DurationUnit?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> DurationUnit!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<DurationUnit>!
}
