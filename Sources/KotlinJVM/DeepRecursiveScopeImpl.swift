// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.DeepRecursiveScopeImpl", implements: Continuation<JavaObject>.self)
open class DeepRecursiveScopeImpl<T: AnyJavaObject, R: AnyJavaObject>: DeepRecursiveScope {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Function3<JavaObject, JavaObject, JavaObject, JavaObject>?, _ arg1: JavaObject?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func resumeWith(_ arg0: JavaObject?)

  @JavaMethod
  open func runCallLoop() -> JavaObject!

  @JavaMethod
  open override func callRecursive(_ arg0: DeepRecursiveFunction<JavaObject, JavaObject>?, _ arg1: JavaObject?, _ arg2: Continuation<JavaObject>?) -> JavaObject!

  @JavaMethod
  open override func callRecursive(_ arg0: JavaObject?, _ arg1: Continuation<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func getContext() -> CoroutineContext!
}
extension JavaClass {
  @JavaStaticMethod
  public func access$setFunction$p<T: AnyJavaObject, R: AnyJavaObject>(_ arg0: DeepRecursiveScopeImpl?, _ arg1: Function3?) where ObjectType == DeepRecursiveScopeImpl<T, R>

  @JavaStaticMethod
  public func access$setCont$p<T: AnyJavaObject, R: AnyJavaObject>(_ arg0: DeepRecursiveScopeImpl?, _ arg1: Continuation?) where ObjectType == DeepRecursiveScopeImpl<T, R>

  @JavaStaticMethod
  public func access$setResult$p<T: AnyJavaObject, R: AnyJavaObject>(_ arg0: DeepRecursiveScopeImpl?, _ arg1: JavaObject?) where ObjectType == DeepRecursiveScopeImpl<T, R>
}
