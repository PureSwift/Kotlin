// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.collections.RingBuffer", implements: RandomAccess.self)
open class RingBuffer<T: AnyJavaObject>: AbstractList {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [JavaObject?], _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func isFull() -> Bool

  @JavaMethod
  open func expanded(_ arg0: Int32) -> RingBuffer<JavaObject>!

  @JavaMethod
  open override func get(_ arg0: Int32) -> JavaObject!

  @JavaMethod
  open func add(_ arg0: JavaObject?)

  @JavaMethod
  open override func toArray() -> [JavaObject?]

  @JavaMethod
  open override func toArray(_ arg0: [JavaObject?]) -> [JavaObject?]

  @JavaMethod
  open override func iterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  open override func getSize() -> Int32

  @JavaMethod
  open func removeFirst(_ arg0: Int32)
}
extension JavaClass {
  @JavaStaticField(isFinal: true)
  public var Companion: AbstractList.Companion!

  @JavaStaticMethod
  public func access$getCapacity$p<T: AnyJavaObject>(_ arg0: RingBuffer?) -> Int32 where ObjectType == RingBuffer<T>

  @JavaStaticMethod
  public func access$getStartIndex$p<T: AnyJavaObject>(_ arg0: RingBuffer?) -> Int32 where ObjectType == RingBuffer<T>

  @JavaStaticMethod
  public func access$getBuffer$p<T: AnyJavaObject>(_ arg0: RingBuffer?) -> [JavaObject?] where ObjectType == RingBuffer<T>
}
