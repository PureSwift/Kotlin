// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.ranges.UIntRange", implements: ClosedRange<UInt>.self, OpenEndRange<UInt>.self)
open class UIntRange: UIntProgression {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, _ arg2: DefaultConstructorMarker?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open override func isEmpty() -> Bool

  @JavaMethod
  open func contains(_ arg0: Comparable?) -> Bool

  @JavaMethod
  open func`getEndInclusive-pVg5ArA`() -> Int32

@JavaMethod
  open func`getEndExclusive-pVg5ArA`() -> Int32

@JavaMethod
  open func`getStart-pVg5ArA`() -> Int32

@JavaMethod
  open func`contains-WZ4Q5Ns`(_ arg0: Int32) -> Bool

@JavaMethod
  open func getEndExclusive() -> Comparable!

  @JavaMethod
  open func getStart() -> Comparable!

  @JavaMethod
  open func getEndInclusive() -> Comparable!
}
extension JavaClass<UIntRange> {
  @JavaStaticField(isFinal: true)
  public var Companion: UIntRange.Companion!

  @JavaStaticField(isFinal: true)
  public var Companion: UIntProgression.Companion!

  @JavaStaticMethod
  public func`getEndExclusive-pVg5ArA$annotations`()

@JavaStaticMethod
  public func access$getEMPTY$cp() -> UIntRange!
}
