// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

extension KParameter {
  @JavaClass("kotlin.reflect.KParameter$Kind")
  open class Kind: Enum {
    public enum KindCases: Equatable {
      case INSTANCE
  case EXTENSION_RECEIVER
  case VALUE
    }

    public var enumValue: KindCases! {
      let classObj = self.javaClass
      if self.equals(classObj.INSTANCE?.as(JavaObject.self)) {
        return KindCases.INSTANCE
  } else if self.equals(classObj.EXTENSION_RECEIVER?.as(JavaObject.self)) {
        return KindCases.EXTENSION_RECEIVER
  } else if self.equals(classObj.VALUE?.as(JavaObject.self)) {
        return KindCases.VALUE
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: KindCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Kind>(environment: _environment)
    switch enumValue {
      case .INSTANCE:
        if let INSTANCE = classObj.INSTANCE {
          self.init(javaHolder: INSTANCE.javaHolder)
        } else {
          fatalError("Enum value INSTANCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXTENSION_RECEIVER:
        if let EXTENSION_RECEIVER = classObj.EXTENSION_RECEIVER {
          self.init(javaHolder: EXTENSION_RECEIVER.javaHolder)
        } else {
          fatalError("Enum value EXTENSION_RECEIVER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .VALUE:
        if let VALUE = classObj.VALUE {
          self.init(javaHolder: VALUE.javaHolder)
        } else {
          fatalError("Enum value VALUE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension KParameter.Kind {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<KParameter.Kind> {
  @JavaStaticField(isFinal: true)
  public var INSTANCE: KParameter.Kind!

  @JavaStaticField(isFinal: true)
  public var EXTENSION_RECEIVER: KParameter.Kind!

  @JavaStaticField(isFinal: true)
  public var VALUE: KParameter.Kind!

  @JavaStaticMethod
  public func values() -> [KParameter.Kind?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> KParameter.Kind!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<KParameter.Kind>!
}
