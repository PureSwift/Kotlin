// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.io.encoding.Base64")
open class Base64: JavaObject {
  @JavaMethod
  open func withPadding(_ arg0: Base64.PaddingOption?) -> Base64!

  @JavaMethod
  open func encodeToAppendable(_ arg0: [Int8], _ arg1: Appendable?, _ arg2: Int32, _ arg3: Int32) -> Appendable!

  @JavaMethod
  open func encodeToByteArray(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> [Int8]

  @JavaMethod
  open func checkSourceBounds$kotlin_stdlib(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open func charsToBytesImpl$kotlin_stdlib(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) -> [Int8]

  @JavaMethod
  open func isMimeScheme$kotlin_stdlib() -> Bool

  @JavaMethod
  open func encodeIntoByteArray(_ arg0: [Int8], _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32) -> Int32

  @JavaMethod
  open func isUrlSafe$kotlin_stdlib() -> Bool

  @JavaMethod
  open func getPaddingOption$kotlin_stdlib() -> Base64.PaddingOption!

  @JavaMethod
  open func decodeSize$kotlin_stdlib(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> Int32

  @JavaMethod
  open func decodeIntoByteArray(_ arg0: CharSequence?, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32) -> Int32

  @JavaMethod
  open func decodeIntoByteArray(_ arg0: [Int8], _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32) -> Int32

  @JavaMethod
  open func encodeSize$kotlin_stdlib(_ arg0: Int32) -> Int32

  @JavaMethod
  open func bytesToStringImpl$kotlin_stdlib(_ arg0: [Int8]) -> String

  @JavaMethod
  open func encodeToByteArrayImpl$kotlin_stdlib(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> [Int8]

  @JavaMethod
  open func encodeIntoByteArrayImpl$kotlin_stdlib(_ arg0: [Int8], _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32) -> Int32

  @JavaMethod
  open func decode(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) -> [Int8]

  @JavaMethod
  open func decode(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> [Int8]

  @JavaMethod
  open func encode(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> String
}
extension JavaClass<Base64> {
  @JavaStaticField(isFinal: true)
  public var Default: Base64.Default!

  @JavaStaticField(isFinal: true)
  public var bytesPerGroup: Int32

  @JavaStaticField(isFinal: true)
  public var symbolsPerGroup: Int32

  @JavaStaticField(isFinal: true)
  public var padSymbol: Int8

  @JavaStaticField(isFinal: true)
  public var mimeLineLength: Int32

  @JavaStaticMethod
  public func encode$default(_ arg0: Base64?, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: JavaObject?) -> String

  @JavaStaticMethod
  public func decode$default(_ arg0: Base64?, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: JavaObject?) -> [Int8]

  @JavaStaticMethod
  public func decode$default(_ arg0: Base64?, _ arg1: CharSequence?, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: JavaObject?) -> [Int8]

  @JavaStaticMethod
  public func access$getMime$cp() -> Base64!

  @JavaStaticMethod
  public func encodeToByteArray$default(_ arg0: Base64?, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: JavaObject?) -> [Int8]

  @JavaStaticMethod
  public func encodeIntoByteArray$default(_ arg0: Base64?, _ arg1: [Int8], _ arg2: [Int8], _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: JavaObject?) -> Int32

  @JavaStaticMethod
  public func encodeToAppendable$default(_ arg0: Base64?, _ arg1: [Int8], _ arg2: Appendable?, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: JavaObject?) -> Appendable!

  @JavaStaticMethod
  public func decodeIntoByteArray$default(_ arg0: Base64?, _ arg1: [Int8], _ arg2: [Int8], _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: JavaObject?) -> Int32

  @JavaStaticMethod
  public func decodeIntoByteArray$default(_ arg0: Base64?, _ arg1: CharSequence?, _ arg2: [Int8], _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: JavaObject?) -> Int32

  @JavaStaticMethod
  public func access$getUrlSafe$cp() -> Base64!

  @JavaStaticMethod
  public func access$getMimeLineSeparatorSymbols$cp() -> [Int8]
}
