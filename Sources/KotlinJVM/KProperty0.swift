// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaKitReflection
import JavaRuntime
import JavaUtil

@JavaInterface("kotlin.reflect.KProperty0", extends: KProperty<JavaObject>.self, Function0<JavaObject>.self)
public struct KProperty0<V: AnyJavaObject> {
    
  @JavaMethod
  public func getGetter() -> KProperty0<JavaObject>.Getter!

  @JavaMethod
  public func getGetter() -> KProperty<JavaObject>.Getter!

  @JavaMethod
  public func getDelegate() -> JavaObject!

  @JavaMethod
  public func get() -> JavaObject!

  @JavaMethod
  public func isLateinit() -> Bool

  @JavaMethod
  public func isConst() -> Bool

  @JavaMethod
  public func callBy(_ arg0: Map<KParameter, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func getVisibility() -> KVisibility!

  @JavaMethod
  public func isSuspend() -> Bool

  @JavaMethod
  public func getName() -> String

  @JavaMethod
  public func getTypeParameters() -> List<KTypeParameter>!

  @JavaMethod
  public func isFinal() -> Bool

  @JavaMethod
  public func getReturnType() -> KType!

  @JavaMethod
  public func isOpen() -> Bool

  @JavaMethod
  public func getParameters() -> List<KParameter>!

  @JavaMethod
  public func isAbstract() -> Bool

  @JavaMethod
  public func call(_ arg0: [JavaObject?]) -> JavaObject!

  @JavaMethod
  public func getAnnotations() -> List<Annotation>!

  @JavaMethod
  public func invoke() -> JavaObject!
}
