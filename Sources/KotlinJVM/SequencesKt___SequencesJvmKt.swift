// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaLang
import JavaRuntime

@JavaClass("kotlin.sequences.SequencesKt___SequencesJvmKt")
open class SequencesKt___SequencesJvmKt: SequencesKt__SequencesKt {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)
}
extension JavaClass<SequencesKt___SequencesJvmKt> {
  @JavaStaticMethod
  public func filterIsInstance(_ arg0: Sequence<JavaObject>?, _ arg1: JavaClass<JavaObject>?) -> Sequence<JavaObject>!

  @JavaStaticMethod
  public func filterIsInstanceTo(_ arg0: Sequence<JavaObject>?, _ arg1: JavaCollection<JavaObject>?, _ arg2: JavaClass<JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func min(_ arg0: Sequence?) -> JavaFloat!

  @JavaStaticMethod
  public func min(_ arg0: Sequence?) -> Comparable!

  @JavaStaticMethod
  public func min(_ arg0: Sequence?) -> JavaDouble!

  @JavaStaticMethod
  public func max(_ arg0: Sequence?) -> JavaDouble!

  @JavaStaticMethod
  public func max(_ arg0: Sequence?) -> JavaFloat!

  @JavaStaticMethod
  public func max(_ arg0: Sequence?) -> Comparable!

  @JavaStaticMethod
  public func maxBy(_ arg0: Sequence<JavaObject>?, _ arg1: Function1<JavaObject, Comparable>?) -> JavaObject!

  @JavaStaticMethod
  public func minBy(_ arg0: Sequence<JavaObject>?, _ arg1: Function1<JavaObject, Comparable>?) -> JavaObject!
}
