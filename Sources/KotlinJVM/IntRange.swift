// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.ranges.IntRange", implements: ClosedRange<JavaInteger>.self, OpenEndRange<JavaInteger>.self)
open class IntRange: IntProgression {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getStart() -> Comparable!

  @JavaMethod
  open func getStart() -> JavaInteger!

  @JavaMethod
  open func getEndInclusive() -> Comparable!

  @JavaMethod
  open func getEndInclusive() -> JavaInteger!

  @JavaMethod
  open func getEndExclusive() -> Comparable!

  @JavaMethod
  open func getEndExclusive() -> JavaInteger!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open override func isEmpty() -> Bool

  @JavaMethod
  open func contains(_ arg0: Int32) -> Bool

  @JavaMethod
  open func contains(_ arg0: Comparable?) -> Bool
}
extension JavaClass<IntRange> {
  @JavaStaticField(isFinal: true)
  public var Companion: IntRange.Companion!

  @JavaStaticField(isFinal: true)
  public var Companion: IntProgression.Companion!

  @JavaStaticMethod
  public func getEndExclusive$annotations()

  @JavaStaticMethod
  public func access$getEMPTY$cp() -> IntRange!
}
