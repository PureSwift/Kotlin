// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaLang
import JavaRuntime
import JavaUtil

@JavaClass("kotlin.collections.MapsKt___MapsKt")
open class MapsKt___MapsKt: MapsKt___MapsJvmKt {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)
}
extension JavaClass<MapsKt___MapsKt> {
  @JavaStaticMethod
  public func flatMapSequence(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, Sequence<JavaObject>>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func flatMapTo(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, Iterable<JavaObject>>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func flatMapSequenceTo(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, Sequence<JavaObject>>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func mapNotNull(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func mapNotNullTo(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func mapTo(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: JavaCollection<JavaObject>?, _ arg2: Function1<JavaObject, JavaObject>?) -> JavaCollection<JavaObject>!

  @JavaStaticMethod
  public func none(_ arg0: Map<JavaObject, JavaObject>?) -> Bool

  @JavaStaticMethod
  public func none(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Bool

  @JavaStaticMethod
  public func onEach(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, Unit>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func onEachIndexed(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function2<JavaObject, JavaObject, Unit>?) -> Map<JavaObject, JavaObject>!

  @JavaStaticMethod
  public func asSequence(_ arg0: Map<JavaObject, JavaObject>?) -> Sequence<Map.Entry<JavaObject, JavaObject>>!

  @JavaStaticMethod
  public func map(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, JavaObject>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func toList(_ arg0: Map<JavaObject, JavaObject>?) -> List<Pair<JavaObject, JavaObject>>!

  @JavaStaticMethod
  public func count(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Int32

  @JavaStaticMethod
  public func forEach(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, Unit>?)

  @JavaStaticMethod
  public func all(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Bool

  @JavaStaticMethod
  public func flatMap(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, Iterable<JavaObject>>?) -> List<JavaObject>!

  @JavaStaticMethod
  public func any(_ arg0: Map<JavaObject, JavaObject>?, _ arg1: Function1<JavaObject, JavaBoolean>?) -> Bool

  @JavaStaticMethod
  public func any(_ arg0: Map<JavaObject, JavaObject>?) -> Bool
}
