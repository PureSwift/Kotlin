// Auto-generated by Java-to-Swift wrapper generator.
import JavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.io.FileTreeWalk", implements: Sequence<File>.self)
open class FileTreeWalk: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: File?, _ arg1: FileWalkDirection?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: File?, _ arg1: FileWalkDirection?, _ arg2: Int32, _ arg3: DefaultConstructorMarker?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func onEnter(_ arg0: Function1<JavaObject, JavaBoolean>?) -> FileTreeWalk!

  @JavaMethod
  open func onLeave(_ arg0: Function1<JavaObject, Unit>?) -> FileTreeWalk!

  @JavaMethod
  open func onFail(_ arg0: Function2<JavaObject, JavaObject, Unit>?) -> FileTreeWalk!

  @JavaMethod
  open func iterator() -> JavaIterator<File>!

  @JavaMethod
  open func maxDepth(_ arg0: Int32) -> FileTreeWalk!
}
extension JavaClass<FileTreeWalk> {
  @JavaStaticMethod
  public func access$getStart$p(_ arg0: FileTreeWalk?) -> File!

  @JavaStaticMethod
  public func access$getDirection$p(_ arg0: FileTreeWalk?) -> FileWalkDirection!

  @JavaStaticMethod
  public func access$getMaxDepth$p(_ arg0: FileTreeWalk?) -> Int32

  @JavaStaticMethod
  public func access$getOnEnter$p(_ arg0: FileTreeWalk?) -> Function1!

  @JavaStaticMethod
  public func access$getOnFail$p(_ arg0: FileTreeWalk?) -> Function2!

  @JavaStaticMethod
  public func access$getOnLeave$p(_ arg0: FileTreeWalk?) -> Function1!
}
