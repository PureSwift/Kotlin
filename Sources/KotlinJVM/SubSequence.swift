// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.sequences.SubSequence", implements: Sequence<JavaObject>.self, DropTakeSequence<JavaObject>.self)
open class SubSequence<T: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Sequence<JavaObject>?, _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func drop(_ arg0: Int32) -> Sequence<JavaObject>!

  @JavaMethod
  open func iterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  open func take(_ arg0: Int32) -> Sequence<JavaObject>!
}
extension JavaClass {
  @JavaStaticMethod
  public func access$getStartIndex$p<T: AnyJavaObject>(_ arg0: SubSequence?) -> Int32 where ObjectType == SubSequence<T>

  @JavaStaticMethod
  public func access$getEndIndex$p<T: AnyJavaObject>(_ arg0: SubSequence?) -> Int32 where ObjectType == SubSequence<T>

  @JavaStaticMethod
  public func access$getSequence$p<T: AnyJavaObject>(_ arg0: SubSequence?) -> Sequence! where ObjectType == SubSequence<T>
}
