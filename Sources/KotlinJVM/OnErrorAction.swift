// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.io.OnErrorAction")
open class OnErrorAction: JavaObject {
  public enum OnErrorActionCases: Equatable {
    case SKIP
    case TERMINATE
  }

  public var enumValue: OnErrorActionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.SKIP?.as(JavaObject.self)) {
      return OnErrorActionCases.SKIP
    } else if self.equals(classObj.TERMINATE?.as(JavaObject.self)) {
      return OnErrorActionCases.TERMINATE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: OnErrorActionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<OnErrorAction>(environment: _environment)
    switch enumValue {
      case .SKIP:
        if let SKIP = classObj.SKIP {
          self.init(javaHolder: SKIP.javaHolder)
        } else {
          fatalError("Enum value SKIP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TERMINATE:
        if let TERMINATE = classObj.TERMINATE {
          self.init(javaHolder: TERMINATE.javaHolder)
        } else {
          fatalError("Enum value TERMINATE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension OnErrorAction {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<OnErrorAction> {
  @JavaStaticField(isFinal: true)
  public var SKIP: OnErrorAction!

  @JavaStaticField(isFinal: true)
  public var TERMINATE: OnErrorAction!

  @JavaStaticMethod
  public func values() -> [OnErrorAction?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> OnErrorAction!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<OnErrorAction>!
}
