// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.LazyThreadSafetyMode")
open class LazyThreadSafetyMode: JavaObject {
  public enum LazyThreadSafetyModeCases: Equatable {
    case SYNCHRONIZED
    case PUBLICATION
    case NONE
  }

  public var enumValue: LazyThreadSafetyModeCases! {
    let classObj = self.javaClass
    if self.equals(classObj.SYNCHRONIZED?.as(JavaObject.self)) {
      return LazyThreadSafetyModeCases.SYNCHRONIZED
    } else if self.equals(classObj.PUBLICATION?.as(JavaObject.self)) {
      return LazyThreadSafetyModeCases.PUBLICATION
    } else if self.equals(classObj.NONE?.as(JavaObject.self)) {
      return LazyThreadSafetyModeCases.NONE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: LazyThreadSafetyModeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<LazyThreadSafetyMode>(environment: _environment)
    switch enumValue {
      case .SYNCHRONIZED:
        if let SYNCHRONIZED = classObj.SYNCHRONIZED {
          self.init(javaHolder: SYNCHRONIZED.javaHolder)
        } else {
          fatalError("Enum value SYNCHRONIZED was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PUBLICATION:
        if let PUBLICATION = classObj.PUBLICATION {
          self.init(javaHolder: PUBLICATION.javaHolder)
        } else {
          fatalError("Enum value PUBLICATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NONE:
        if let NONE = classObj.NONE {
          self.init(javaHolder: NONE.javaHolder)
        } else {
          fatalError("Enum value NONE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<LazyThreadSafetyMode> {
  @JavaStaticField(isFinal: true)
  public var SYNCHRONIZED: LazyThreadSafetyMode!

  @JavaStaticField(isFinal: true)
  public var PUBLICATION: LazyThreadSafetyMode!

  @JavaStaticField(isFinal: true)
  public var NONE: LazyThreadSafetyMode!

  @JavaStaticMethod
  public func values() -> [LazyThreadSafetyMode?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> LazyThreadSafetyMode!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<LazyThreadSafetyMode>!
}
