// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("kotlin.annotation.AnnotationRetention")
open class AnnotationRetention: Enum {
  public enum AnnotationRetentionCases: Equatable {
    case SOURCE
    case BINARY
    case RUNTIME
  }

  public var enumValue: AnnotationRetentionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.SOURCE?.as(JavaObject.self)) {
      return AnnotationRetentionCases.SOURCE
    } else if self.equals(classObj.BINARY?.as(JavaObject.self)) {
      return AnnotationRetentionCases.BINARY
    } else if self.equals(classObj.RUNTIME?.as(JavaObject.self)) {
      return AnnotationRetentionCases.RUNTIME
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: AnnotationRetentionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<AnnotationRetention>(environment: _environment)
    switch enumValue {
      case .SOURCE:
        if let SOURCE = classObj.SOURCE {
          self.init(javaHolder: SOURCE.javaHolder)
        } else {
          fatalError("Enum value SOURCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BINARY:
        if let BINARY = classObj.BINARY {
          self.init(javaHolder: BINARY.javaHolder)
        } else {
          fatalError("Enum value BINARY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RUNTIME:
        if let RUNTIME = classObj.RUNTIME {
          self.init(javaHolder: RUNTIME.javaHolder)
        } else {
          fatalError("Enum value RUNTIME was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AnnotationRetention> {
  @JavaStaticField(isFinal: true)
  public var SOURCE: AnnotationRetention!

  @JavaStaticField(isFinal: true)
  public var BINARY: AnnotationRetention!

  @JavaStaticField(isFinal: true)
  public var RUNTIME: AnnotationRetention!

  @JavaStaticMethod
  public func values() -> [AnnotationRetention?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> AnnotationRetention!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<AnnotationRetention>!
}
