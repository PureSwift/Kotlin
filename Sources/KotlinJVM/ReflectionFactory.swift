// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.jvm.internal.ReflectionFactory")
open class ReflectionFactory: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getOrCreateKotlinPackage(_ arg0: JavaClass?, _ arg1: String) -> KDeclarationContainer!

  @JavaMethod
  open func getOrCreateKotlinClass(_ arg0: JavaClass?) -> KClass!

  @JavaMethod
  open func getOrCreateKotlinClass(_ arg0: JavaClass?, _ arg1: String) -> KClass!

  @JavaMethod
  open func createKotlinClass(_ arg0: JavaClass?, _ arg1: String) -> KClass!

  @JavaMethod
  open func createKotlinClass(_ arg0: JavaClass?) -> KClass!

  @JavaMethod
  open func renderLambdaToString(_ arg0: Lambda?) -> String

  @JavaMethod
  open func renderLambdaToString(_ arg0: FunctionBase?) -> String

  @JavaMethod
  open func mutableProperty0(_ arg0: MutablePropertyReference0?) -> KMutableProperty0!

  @JavaMethod
  open func property1(_ arg0: PropertyReference1?) -> KProperty1!

  @JavaMethod
  open func property2(_ arg0: PropertyReference2?) -> KProperty2!

  @JavaMethod
  open func mutableProperty2(_ arg0: MutablePropertyReference2?) -> KMutableProperty2!

  @JavaMethod
  open func typeOf(_ arg0: KClassifier?, _ arg1: List<KTypeProjection>?, _ arg2: Bool) -> KType!

  @JavaMethod
  open func typeParameter(_ arg0: JavaObject?, _ arg1: String, _ arg2: KVariance?, _ arg3: Bool) -> KTypeParameter!

  @JavaMethod
  open func setUpperBounds(_ arg0: KTypeParameter?, _ arg1: List<KType>?)

  @JavaMethod
  open func platformType(_ arg0: KType?, _ arg1: KType?) -> KType!

  @JavaMethod
  open func mutableCollectionType(_ arg0: KType?) -> KType!

  @JavaMethod
  open func nothingType(_ arg0: KType?) -> KType!

  @JavaMethod
  open func mutableProperty1(_ arg0: MutablePropertyReference1?) -> KMutableProperty1!

  @JavaMethod
  open func property0(_ arg0: PropertyReference0?) -> KProperty0!

  @JavaMethod
  open func function(_ arg0: FunctionReference?) -> KFunction!
}
