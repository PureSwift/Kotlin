// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("kotlin.text.CharDirectionality")
open class CharDirectionality: JavaObject {
  public enum CharDirectionalityCases: Equatable {
    case UNDEFINED
    case LEFT_TO_RIGHT
    case RIGHT_TO_LEFT
    case RIGHT_TO_LEFT_ARABIC
    case EUROPEAN_NUMBER
    case EUROPEAN_NUMBER_SEPARATOR
    case EUROPEAN_NUMBER_TERMINATOR
    case ARABIC_NUMBER
    case COMMON_NUMBER_SEPARATOR
    case NONSPACING_MARK
    case BOUNDARY_NEUTRAL
    case PARAGRAPH_SEPARATOR
    case SEGMENT_SEPARATOR
    case WHITESPACE
    case OTHER_NEUTRALS
    case LEFT_TO_RIGHT_EMBEDDING
    case LEFT_TO_RIGHT_OVERRIDE
    case RIGHT_TO_LEFT_EMBEDDING
    case RIGHT_TO_LEFT_OVERRIDE
    case POP_DIRECTIONAL_FORMAT
  }

  public var enumValue: CharDirectionalityCases! {
    let classObj = self.javaClass
    if self.equals(classObj.UNDEFINED?.as(JavaObject.self)) {
      return CharDirectionalityCases.UNDEFINED
    } else if self.equals(classObj.LEFT_TO_RIGHT?.as(JavaObject.self)) {
      return CharDirectionalityCases.LEFT_TO_RIGHT
    } else if self.equals(classObj.RIGHT_TO_LEFT?.as(JavaObject.self)) {
      return CharDirectionalityCases.RIGHT_TO_LEFT
    } else if self.equals(classObj.RIGHT_TO_LEFT_ARABIC?.as(JavaObject.self)) {
      return CharDirectionalityCases.RIGHT_TO_LEFT_ARABIC
    } else if self.equals(classObj.EUROPEAN_NUMBER?.as(JavaObject.self)) {
      return CharDirectionalityCases.EUROPEAN_NUMBER
    } else if self.equals(classObj.EUROPEAN_NUMBER_SEPARATOR?.as(JavaObject.self)) {
      return CharDirectionalityCases.EUROPEAN_NUMBER_SEPARATOR
    } else if self.equals(classObj.EUROPEAN_NUMBER_TERMINATOR?.as(JavaObject.self)) {
      return CharDirectionalityCases.EUROPEAN_NUMBER_TERMINATOR
    } else if self.equals(classObj.ARABIC_NUMBER?.as(JavaObject.self)) {
      return CharDirectionalityCases.ARABIC_NUMBER
    } else if self.equals(classObj.COMMON_NUMBER_SEPARATOR?.as(JavaObject.self)) {
      return CharDirectionalityCases.COMMON_NUMBER_SEPARATOR
    } else if self.equals(classObj.NONSPACING_MARK?.as(JavaObject.self)) {
      return CharDirectionalityCases.NONSPACING_MARK
    } else if self.equals(classObj.BOUNDARY_NEUTRAL?.as(JavaObject.self)) {
      return CharDirectionalityCases.BOUNDARY_NEUTRAL
    } else if self.equals(classObj.PARAGRAPH_SEPARATOR?.as(JavaObject.self)) {
      return CharDirectionalityCases.PARAGRAPH_SEPARATOR
    } else if self.equals(classObj.SEGMENT_SEPARATOR?.as(JavaObject.self)) {
      return CharDirectionalityCases.SEGMENT_SEPARATOR
    } else if self.equals(classObj.WHITESPACE?.as(JavaObject.self)) {
      return CharDirectionalityCases.WHITESPACE
    } else if self.equals(classObj.OTHER_NEUTRALS?.as(JavaObject.self)) {
      return CharDirectionalityCases.OTHER_NEUTRALS
    } else if self.equals(classObj.LEFT_TO_RIGHT_EMBEDDING?.as(JavaObject.self)) {
      return CharDirectionalityCases.LEFT_TO_RIGHT_EMBEDDING
    } else if self.equals(classObj.LEFT_TO_RIGHT_OVERRIDE?.as(JavaObject.self)) {
      return CharDirectionalityCases.LEFT_TO_RIGHT_OVERRIDE
    } else if self.equals(classObj.RIGHT_TO_LEFT_EMBEDDING?.as(JavaObject.self)) {
      return CharDirectionalityCases.RIGHT_TO_LEFT_EMBEDDING
    } else if self.equals(classObj.RIGHT_TO_LEFT_OVERRIDE?.as(JavaObject.self)) {
      return CharDirectionalityCases.RIGHT_TO_LEFT_OVERRIDE
    } else if self.equals(classObj.POP_DIRECTIONAL_FORMAT?.as(JavaObject.self)) {
      return CharDirectionalityCases.POP_DIRECTIONAL_FORMAT
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: CharDirectionalityCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<CharDirectionality>(environment: _environment)
    switch enumValue {
      case .UNDEFINED:
        if let UNDEFINED = classObj.UNDEFINED {
          self.init(javaHolder: UNDEFINED.javaHolder)
        } else {
          fatalError("Enum value UNDEFINED was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LEFT_TO_RIGHT:
        if let LEFT_TO_RIGHT = classObj.LEFT_TO_RIGHT {
          self.init(javaHolder: LEFT_TO_RIGHT.javaHolder)
        } else {
          fatalError("Enum value LEFT_TO_RIGHT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RIGHT_TO_LEFT:
        if let RIGHT_TO_LEFT = classObj.RIGHT_TO_LEFT {
          self.init(javaHolder: RIGHT_TO_LEFT.javaHolder)
        } else {
          fatalError("Enum value RIGHT_TO_LEFT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RIGHT_TO_LEFT_ARABIC:
        if let RIGHT_TO_LEFT_ARABIC = classObj.RIGHT_TO_LEFT_ARABIC {
          self.init(javaHolder: RIGHT_TO_LEFT_ARABIC.javaHolder)
        } else {
          fatalError("Enum value RIGHT_TO_LEFT_ARABIC was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EUROPEAN_NUMBER:
        if let EUROPEAN_NUMBER = classObj.EUROPEAN_NUMBER {
          self.init(javaHolder: EUROPEAN_NUMBER.javaHolder)
        } else {
          fatalError("Enum value EUROPEAN_NUMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EUROPEAN_NUMBER_SEPARATOR:
        if let EUROPEAN_NUMBER_SEPARATOR = classObj.EUROPEAN_NUMBER_SEPARATOR {
          self.init(javaHolder: EUROPEAN_NUMBER_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value EUROPEAN_NUMBER_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EUROPEAN_NUMBER_TERMINATOR:
        if let EUROPEAN_NUMBER_TERMINATOR = classObj.EUROPEAN_NUMBER_TERMINATOR {
          self.init(javaHolder: EUROPEAN_NUMBER_TERMINATOR.javaHolder)
        } else {
          fatalError("Enum value EUROPEAN_NUMBER_TERMINATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ARABIC_NUMBER:
        if let ARABIC_NUMBER = classObj.ARABIC_NUMBER {
          self.init(javaHolder: ARABIC_NUMBER.javaHolder)
        } else {
          fatalError("Enum value ARABIC_NUMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COMMON_NUMBER_SEPARATOR:
        if let COMMON_NUMBER_SEPARATOR = classObj.COMMON_NUMBER_SEPARATOR {
          self.init(javaHolder: COMMON_NUMBER_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value COMMON_NUMBER_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NONSPACING_MARK:
        if let NONSPACING_MARK = classObj.NONSPACING_MARK {
          self.init(javaHolder: NONSPACING_MARK.javaHolder)
        } else {
          fatalError("Enum value NONSPACING_MARK was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BOUNDARY_NEUTRAL:
        if let BOUNDARY_NEUTRAL = classObj.BOUNDARY_NEUTRAL {
          self.init(javaHolder: BOUNDARY_NEUTRAL.javaHolder)
        } else {
          fatalError("Enum value BOUNDARY_NEUTRAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PARAGRAPH_SEPARATOR:
        if let PARAGRAPH_SEPARATOR = classObj.PARAGRAPH_SEPARATOR {
          self.init(javaHolder: PARAGRAPH_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value PARAGRAPH_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SEGMENT_SEPARATOR:
        if let SEGMENT_SEPARATOR = classObj.SEGMENT_SEPARATOR {
          self.init(javaHolder: SEGMENT_SEPARATOR.javaHolder)
        } else {
          fatalError("Enum value SEGMENT_SEPARATOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WHITESPACE:
        if let WHITESPACE = classObj.WHITESPACE {
          self.init(javaHolder: WHITESPACE.javaHolder)
        } else {
          fatalError("Enum value WHITESPACE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHER_NEUTRALS:
        if let OTHER_NEUTRALS = classObj.OTHER_NEUTRALS {
          self.init(javaHolder: OTHER_NEUTRALS.javaHolder)
        } else {
          fatalError("Enum value OTHER_NEUTRALS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LEFT_TO_RIGHT_EMBEDDING:
        if let LEFT_TO_RIGHT_EMBEDDING = classObj.LEFT_TO_RIGHT_EMBEDDING {
          self.init(javaHolder: LEFT_TO_RIGHT_EMBEDDING.javaHolder)
        } else {
          fatalError("Enum value LEFT_TO_RIGHT_EMBEDDING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LEFT_TO_RIGHT_OVERRIDE:
        if let LEFT_TO_RIGHT_OVERRIDE = classObj.LEFT_TO_RIGHT_OVERRIDE {
          self.init(javaHolder: LEFT_TO_RIGHT_OVERRIDE.javaHolder)
        } else {
          fatalError("Enum value LEFT_TO_RIGHT_OVERRIDE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RIGHT_TO_LEFT_EMBEDDING:
        if let RIGHT_TO_LEFT_EMBEDDING = classObj.RIGHT_TO_LEFT_EMBEDDING {
          self.init(javaHolder: RIGHT_TO_LEFT_EMBEDDING.javaHolder)
        } else {
          fatalError("Enum value RIGHT_TO_LEFT_EMBEDDING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RIGHT_TO_LEFT_OVERRIDE:
        if let RIGHT_TO_LEFT_OVERRIDE = classObj.RIGHT_TO_LEFT_OVERRIDE {
          self.init(javaHolder: RIGHT_TO_LEFT_OVERRIDE.javaHolder)
        } else {
          fatalError("Enum value RIGHT_TO_LEFT_OVERRIDE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .POP_DIRECTIONAL_FORMAT:
        if let POP_DIRECTIONAL_FORMAT = classObj.POP_DIRECTIONAL_FORMAT {
          self.init(javaHolder: POP_DIRECTIONAL_FORMAT.javaHolder)
        } else {
          fatalError("Enum value POP_DIRECTIONAL_FORMAT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getValue() -> Int32
}
extension JavaClass<CharDirectionality> {
  @JavaStaticField(isFinal: true)
  public var Companion: CharDirectionality.Companion!

  @JavaStaticField(isFinal: true)
  public var UNDEFINED: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var LEFT_TO_RIGHT: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var RIGHT_TO_LEFT: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var RIGHT_TO_LEFT_ARABIC: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var EUROPEAN_NUMBER: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var EUROPEAN_NUMBER_SEPARATOR: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var EUROPEAN_NUMBER_TERMINATOR: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var ARABIC_NUMBER: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var COMMON_NUMBER_SEPARATOR: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var NONSPACING_MARK: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var BOUNDARY_NEUTRAL: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var PARAGRAPH_SEPARATOR: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var SEGMENT_SEPARATOR: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var WHITESPACE: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var OTHER_NEUTRALS: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var LEFT_TO_RIGHT_EMBEDDING: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var LEFT_TO_RIGHT_OVERRIDE: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var RIGHT_TO_LEFT_EMBEDDING: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var RIGHT_TO_LEFT_OVERRIDE: CharDirectionality!

  @JavaStaticField(isFinal: true)
  public var POP_DIRECTIONAL_FORMAT: CharDirectionality!

  @JavaStaticMethod
  public func access$getDirectionalityMap$delegate$cp() -> Lazy!

  @JavaStaticMethod
  public func values() -> [CharDirectionality?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> CharDirectionality!

  @JavaStaticMethod
  public func getEntries() -> EnumEntries<CharDirectionality>!
}
