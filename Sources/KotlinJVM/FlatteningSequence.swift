// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("kotlin.sequences.FlatteningSequence", implements: Sequence<JavaObject>.self)
open class FlatteningSequence<T: AnyJavaObject, R: AnyJavaObject, E: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Sequence<JavaObject>?, _ arg1: Function1<JavaObject, JavaObject>?, _ arg2: Function1<JavaObject, JavaIterator<JavaObject>>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func iterator() -> JavaIterator<JavaObject>!
}
extension JavaClass {
  @JavaStaticMethod
  public func access$getSequence$p<T: AnyJavaObject, R: AnyJavaObject, E: AnyJavaObject>(_ arg0: FlatteningSequence?) -> Sequence! where ObjectType == FlatteningSequence<T, R, E>

  @JavaStaticMethod
  public func access$getIterator$p<T: AnyJavaObject, R: AnyJavaObject, E: AnyJavaObject>(_ arg0: FlatteningSequence?) -> Function1! where ObjectType == FlatteningSequence<T, R, E>

  @JavaStaticMethod
  public func access$getTransformer$p<T: AnyJavaObject, R: AnyJavaObject, E: AnyJavaObject>(_ arg0: FlatteningSequence?) -> Function1! where ObjectType == FlatteningSequence<T, R, E>
}
